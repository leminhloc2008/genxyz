================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-10-24T14:16:52.270Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.eslintrc.json
.gitignore
app/[...page]/page.tsx
app/CompetitorAnalysis.tsx
app/globals.css
app/layout.tsx
app/page.tsx
app/SurveyInsights.tsx
builder-registry.ts
components.json
components/AnimatedBackground.tsx
components/builder.tsx
components/Counter/Counter.tsx
components/Counter/styles.module.css
components/features/FeatureSection.tsx
components/features/FeatureShowcase.tsx
components/features/FinalProductShowcase.tsx
components/features/KeyFeatures.tsx
components/features/ScrollingFeatures.tsx
components/layout/AppDetails.tsx
components/layout/AppInterface.tsx
components/layout/CallToAction.tsx
components/layout/HeroSection.tsx
components/layout/OverlaySectionDivider.tsx
components/layout/TransitionCurve.tsx
components/Mockups/Fullmockup1.tsx
components/survey/charts/CommunicationEffectiveness.tsx
components/survey/charts/CustomTooltip.tsx
components/survey/charts/DifficultyConnecting.tsx
components/survey/charts/GenerationDistribution.tsx
components/survey/charts/TopImpacts.tsx
components/survey/interviews/UserInterviews.tsx
components/survey/KeyMetrics.tsx
components/survey/SurveyDashboard.tsx
components/ui/AnimatedCursor.tsx
components/ui/AnimatedNumber.tsx
components/ui/avatar.tsx
components/ui/card.tsx
components/ui/ParallaxSection.tsx
constants/features.ts
constants/surveyData.ts
hooks/useMousePosition.ts
lib/utils.ts
next.config.mjs
package.json
postcss.config.mjs
public/assets/main.svg
README.md
tailwind.config.ts
tsconfig.json
types/index.ts

================================================================
Repository Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: app/[...page]/page.tsx
================
import { builder } from "@builder.io/sdk";
import { RenderBuilderContent } from "../../components/builder";

// Builder Public API Key set in .env file
builder.init(process.env.NEXT_PUBLIC_BUILDER_API_KEY!);

interface PageProps {
  params: {
    page: string[];
  };
}

export default async function Page(props: PageProps) {
  const builderModelName = "page";

  const content = await builder
    // Get the page content from Builder with the specified options
    .get(builderModelName, {
      userAttributes: {
        // Use the page path specified in the URL to fetch the content
        urlPath: "/" + (props?.params?.page?.join("/") || ""),
      },
    })
    // Convert the result to a promise
    .toPromise();

  return (
    <>
      {/* Render the Builder page */}
      <RenderBuilderContent content={content} model={builderModelName} />
    </>
  );
}

================
File: app/CompetitorAnalysis.tsx
================
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Search, AlertCircle, ThumbsDown, ThumbsUp, Zap, ChevronRight, Box, Globe, Brain, Target, Layers } from 'lucide-react';
import { Card, CardContent } from '@/components/ui/card';

export default function Component() {
  const [activeTab, setActiveTab] = useState('overview');
  const [hoveredCard, setHoveredCard] = useState(null);

  const challenges = [
    { 
      icon: Brain,
      title: "Cultural Complexity", 
      description: "Interweaving of culture, languages, and psychology makes it a complex challenge",
      color: "from-purple-500 to-pink-500"
    },
    { 
      icon: Layers,
      title: "Multi-Factor Problem", 
      description: "Generation gap contains many inputs and variables to solve",
      color: "from-blue-500 to-teal-500"
    },
    { 
      icon: Target,
      title: "Focus Dilution", 
      description: "Existing solutions often cover multiple topics, diluting their effectiveness",
      color: "from-orange-500 to-red-500"
    },
    { 
      icon: Globe,
      title: "Lack of Specialization", 
      description: "No dedicated application focusing solely on bridging generational gaps",
      color: "from-green-500 to-emerald-500"
    }
  ];

  const marketFindings = [
    {
      icon: Search,
      title: "Current Landscape",
      description: "No official applications specifically target generational communication gaps",
      stats: "0 direct competitors"
    },
    {
      icon: AlertCircle,
      title: "Challenge Level",
      description: "Solving this comprehensively is challenging due to its macro-level complexity",
      stats: "3+ interconnected factors"
    },
    {
      icon: ThumbsDown,
      title: "Existing Solutions",
      description: "Most platforms are multidisciplinary, causing distraction from the core problem",
      stats: "84% unfocused"
    },
    {
      icon: ThumbsUp,
      title: "Technology Progress",
      description: "Notable efforts made by developers to address specific aspects",
      stats: "Growing rapidly"
    },
    {
      icon: Zap,
      title: "Market Opportunity",
      description: "Strong potential for a focused solution targeting generational understanding",
      stats: "Untapped market"
    }
  ];

  return (
    <motion.section 
      className="py-24 px-4 bg-gradient-to-b from-gray-50 to-white"
      initial={{ opacity: 0 }}
      whileInView={{ opacity: 1 }}
      transition={{ duration: 0.8 }}
      viewport={{ once: true }}
    >
      <div className="max-w-7xl mx-auto">
        <motion.div 
          className="text-center mb-16"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <span className="text-blue-600 font-semibold mb-4 block">Market Research</span>
          <h2 className="text-5xl font-bold mb-6 bg-clip-text text-transparent bg-gradient-to-r from-blue-600 via-purple-600 to-blue-600">
            Competitor Analysis
          </h2>
          <p className="text-gray-600 max-w-2xl mx-auto text-lg">
            Our comprehensive market research reveals a unique opportunity in the generational communication space
          </p>
        </motion.div>

        <div className="flex justify-center mb-12">
          <motion.div 
            className="inline-flex bg-white p-1.5 rounded-2xl"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
          >
            {['overview', 'challenges', 'findings'].map((tab) => (
              <motion.button
                key={tab}
                className={`px-8 py-3 rounded-xl text-sm font-medium transition-all duration-300 ${
                  activeTab === tab 
                    ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white' 
                    : 'text-gray-600 hover:text-blue-600'
                }`}
                onClick={() => setActiveTab(tab)}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                {tab.charAt(0).toUpperCase() + tab.slice(1)}
              </motion.button>
            ))}
          </motion.div>
        </div>

        <AnimatePresence mode="wait">
          <motion.div
            key={activeTab}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.5 }}
            className="min-h-[400px]"
          >
            {activeTab === 'overview' && (
              <div className="space-y-8">
                <Card className="p-8 bg-white rounded-3xl overflow-hidden relative">
                  <div className="absolute inset-0 bg-gradient-to-r from-blue-50 to-purple-50 opacity-50" />
                  <CardContent className="relative space-y-8">
                    <div className="max-w-3xl">
                      <h3 className="text-2xl font-bold mb-4 text-gray-900">Market Overview</h3>
                      <p className="text-lg leading-relaxed text-gray-700">
                        Our research indicates a significant gap in the market for dedicated generational communication solutions. Despite the growing need, no comprehensive application currently exists to bridge this divide.
                      </p>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mt-8">
                      <motion.div 
                        className="bg-gradient-to-r from-blue-500 to-purple-500 p-1 rounded-2xl"
                        whileHover={{ scale: 1.02 }}
                        transition={{ duration: 0.2 }}
                      >
                        <div className="bg-white p-6 rounded-2xl h-full">
                          <h3 className="text-xl font-semibold mb-4 bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-purple-500">
                            Market Opportunity
                          </h3>
                          <p className="text-gray-700">The absence of dedicated solutions creates a unique opportunity for GenBridge to pioneer in this space</p>
                        </div>
                      </motion.div>
                      
                      <motion.div 
                        className="bg-gradient-to-r from-purple-500 to-blue-500 p-1 rounded-2xl"
                        whileHover={{ scale: 1.02 }}
                        transition={{ duration: 0.2 }}
                      >
                        <div className="bg-white p-6 rounded-2xl h-full">
                          <h3 className="text-xl font-semibold mb-4 bg-clip-text text-transparent bg-gradient-to-r from-purple-500 to-blue-500">
                            Current Solutions
                          </h3>
                          <p className="text-gray-700">Existing platforms lack focus, covering multiple topics beyond generational understanding</p>
                        </div>
                      </motion.div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            )}

            {activeTab === 'challenges' && (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {challenges.map((challenge, index) => (
                  <motion.div
                    key={challenge.title}
                    className="group relative"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                    onHoverStart={() => setHoveredCard(index)}
                    onHoverEnd={() => setHoveredCard(null)}
                  >
                    <motion.div 
                      className={`absolute inset-0 bg-gradient-to-r ${challenge.color} rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300`}
                      initial={false}
                      animate={hoveredCard === index ? { scale: 1.02 } : { scale: 1 }}
                    />
                    <div className="relative bg-white p-8 rounded-2xl h-full transform transition-transform duration-300 group-hover:translate-x-1 group-hover:-translate-y-1">
                      <challenge.icon className="w-10 h-10 mb-4 text-gray-700 group-hover:text-blue-600 transition-colors duration-300" />
                      <h3 className="text-xl font-semibold mb-3 group-hover:text-blue-600 transition-colors duration-300">
                        {challenge.title}
                      </h3>
                      <p className="text-gray-600">{challenge.description}</p>
                    </div>
                  </motion.div>
                ))}
              </div>
            )}

            {activeTab === 'findings' && (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {marketFindings.map((finding, index) => (
                  <motion.div
                    key={finding.title}
                    className="group relative"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                    whileHover={{ y: -5 }}
                  >
                    <div className="bg-white p-8 rounded-2xl h-full border border-transparent transition-all duration-300 group-hover:border-blue-500">
                      <div className="flex items-center justify-between mb-6">
                        <div className="p-3 bg-blue-50 rounded-xl group-hover:bg-blue-100 transition-colors duration-300">
                          <finding.icon className="w-6 h-6 text-blue-500" />
                        </div>
                        <span className="text-sm font-semibold text-blue-600 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                          {finding.stats}
                        </span>
                      </div>
                      <h3 className="text-xl font-semibold mb-3 group-hover:text-blue-600 transition-colors duration-300">
                        {finding.title}
                      </h3>
                      <p className="text-gray-600">{finding.description}</p>
                      <motion.div 
                        className="mt-4 flex items-center text-blue-500 opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                        initial={false}
                        animate={hoveredCard === index ? { x: 5 } : { x: 0 }}
                      >
                        <span className="text-sm font-medium mr-1">Learn more</span>
                        <ChevronRight className="w-4 h-4" />
                      </motion.div>
                    </div>
                  </motion.div>
                ))}
              </div>
            )}
          </motion.div>
        </AnimatePresence>
      </div>
    </motion.section>
  );
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
  .preserve-3d {
    transform-style: preserve-3d;
    backface-visibility: hidden;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: app/layout.tsx
================
import './globals.css'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Generational Gap Survey Dashboard',
  description: 'A comprehensive dashboard displaying insights from a generational gap survey',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}

================
File: app/page.tsx
================
// app/page.tsx
"use client";

import { useRef } from "react";
import { motion, useViewportScroll, useSpring } from "framer-motion";
import { AnimatedCursor } from "@/components/ui/AnimatedCursor";
import { HeroSection } from "@/components/layout/HeroSection";
import { AppDetails } from "@/components/layout/AppDetails";
import { KeyFeatures } from "@/components/features/KeyFeatures";
import { FeatureShowcase } from "@/components/features/FeatureShowcase";
import { ScrollingFeatures } from "@/components/features/ScrollingFeatures";
import { SurveyDashboard } from "@/components/survey/SurveyDashboard";
import { FinalProductShowcase } from "@/components/features/FinalProductShowcase";
import { CallToAction } from "@/components/layout/CallToAction";
import { AppInterface } from "@/components/layout/AppInterface";
import { OverlaySectionDivider } from "@/components/layout/OverlaySectionDivider";
import { TransitionCurve } from "@/components/layout/TransitionCurve";
import { FeatureSection } from "@/components/features/FeatureSection";
import SurveyInsights from '@/app/SurveyInsights';
import CompetitorAnalysis from '@/app/CompetitorAnalysis';
import FullMockup from '@/components/Mockups/Fullmockup1';
import Image from 'next/image';

export default function LandingPage() {
  const scrollRef = useRef<HTMLDivElement>(null);
  const { scrollYProgress } = useViewportScroll();
  const scaleX = useSpring(scrollYProgress, {
    stiffness: 100,
    damping: 30,
    restDelta: 0.001,
  });

  return (
    <div className="relative">
      <AnimatedCursor />
      <motion.div
        className="fixed top-0 left-0 right-0 h-1 bg-blue-500 origin-left z-50"
        style={{ scaleX }}
      />

      <main className="relative">
        {/* Dark Theme Sections - App Features */}
        <section className="bg-black text-white"> {/* Added text-white */}
          <div className="max-w-7xl mx-auto px-4">
            <HeroSection />
            
          </div>
        </section>

        

        <section className="bg-black text-white">
          <div className="max-w-7xl mx-auto px-4">
            <div className="space-y-8">
                  <AppDetails />
                  <FullMockup />
            </div>
          </div>
        </section>

        {/* First Transition: Dark to Light */}
        <section className="relative">
          <div className="absolute inset-0 bg-black" />
          <TransitionCurve />
        </section>

        <section className="bg-white text-gray-900">
          <div className="max-w-[90rem] mx-auto px-4 sm:px-6 lg:px-8"> {/* Increased max width */}
            <div className="space-y-32 py-20">
              <SurveyInsights />
              <OverlaySectionDivider />
              <div className="relative z-20">
                <CompetitorAnalysis />
              </div>
              <SurveyDashboard />
              
              {/* Design System Section */}
              <motion.div 
                className="relative"
                initial={{ opacity: 0 }}
                whileInView={{ opacity: 1 }}
                viewport={{ once: true }}
                transition={{ duration: 1 }}
              >
                {/* Background Gradient Effects */}
                <div className="absolute inset-0 overflow-hidden">
                  <motion.div 
                    className="absolute top-0 left-1/4 w-96 h-96 bg-blue-500/20 rounded-full blur-3xl"
                    animate={{ 
                      scale: [1, 1.2, 1],
                      opacity: [0.3, 0.5, 0.3]
                    }}
                    transition={{ 
                      duration: 8,
                      repeat: Infinity,
                      repeatType: "reverse"
                    }}
                  />
                  <motion.div 
                    className="absolute bottom-0 right-1/4 w-96 h-96 bg-purple-500/20 rounded-full blur-3xl"
                    animate={{ 
                      scale: [1.2, 1, 1.2],
                      opacity: [0.3, 0.5, 0.3]
                    }}
                    transition={{ 
                      duration: 8,
                      repeat: Infinity,
                      repeatType: "reverse",
                      delay: 1
                    }}
                  />
                </div>

                <div className="relative z-10">
                  {/* Header Section */}
                  <div className="text-center mb-16">
                    <motion.div
                      initial={{ scale: 0.5, opacity: 0 }}
                      whileInView={{ scale: 1, opacity: 1 }}
                      viewport={{ once: true }}
                      transition={{ duration: 0.5 }}
                      className="inline-block"
                    >
                      <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-blue-600 text-white px-6 py-2 rounded-full text-sm font-semibold mb-4">
                        DESIGN LANGUAGE
                      </div>
                    </motion.div>
                    
                    <motion.h2 
                      className="text-6xl font-bold mb-6 bg-clip-text text-transparent bg-gradient-to-r from-blue-600 via-purple-600 to-blue-600"
                      initial={{ opacity: 0, y: 20 }}
                      whileInView={{ opacity: 1, y: 0 }}
                      viewport={{ once: true }}
                      transition={{ duration: 0.5, delay: 0.2 }}
                    >
                      Design System
                    </motion.h2>
                    
                    <motion.p 
                      className="text-xl text-gray-600 max-w-2xl mx-auto"
                      initial={{ opacity: 0, y: 20 }}
                      whileInView={{ opacity: 1, y: 0 }}
                      viewport={{ once: true }}
                      transition={{ duration: 0.5, delay: 0.3 }}
                    >
                      A comprehensive design language that ensures consistency and elegance across our platform
                    </motion.p>
                  </div>

                  {/* Image Container */}
                  <motion.div 
                    className="relative w-full aspect-[21/9] rounded-3xl overflow-hidden shadow-2xl"
                    initial={{ opacity: 0, y: 40, scale: 0.95 }}
                    whileInView={{ opacity: 1, y: 0, scale: 1 }}
                    viewport={{ once: true }}
                    transition={{ duration: 0.8 }}
                    whileHover={{ scale: 1.02 }}
                  >
                    {/* Floating Elements */}
                    <motion.div
                      className="absolute -top-10 right-10 w-40 h-40 bg-blue-500/10 rounded-full blur-2xl z-10"
                      animate={{ 
                        y: [-20, 20, -20],
                        opacity: [0.5, 0.8, 0.5]
                      }}
                      transition={{ 
                        duration: 5,
                        repeat: Infinity,
                        repeatType: "reverse"
                      }}
                    />
                    
                    <motion.div
                      className="absolute -bottom-10 left-10 w-40 h-40 bg-purple-500/10 rounded-full blur-2xl z-10"
                      animate={{ 
                        y: [20, -20, 20],
                        opacity: [0.5, 0.8, 0.5]
                      }}
                      transition={{ 
                        duration: 5,
                        repeat: Infinity,
                        repeatType: "reverse",
                        delay: 1
                      }}
                    />

                    {/* Main Image */}
                    <Image
                      src="/assets/dessystem.png"
                      alt="Design System"
                      layout="fill"
                      objectFit="cover"
                      className="rounded-3xl"
                      priority
                    />

                    {/* Gradient Overlays */}
                    <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent" />
                    <div className="absolute inset-0 bg-gradient-to-r from-black/10 via-transparent to-black/10" />
                    
                    {/* Interactive Hover Effect */}
                    <motion.div 
                      className="absolute inset-0 bg-blue-500/0 transition-colors duration-300"
                      whileHover={{ backgroundColor: 'rgba(59, 130, 246, 0.05)' }}
                    />
                  </motion.div>

                  {/* Bottom Decorative Element */}
                  <motion.div
                    className="absolute -bottom-10 left-1/2 transform -translate-x-1/2"
                    initial={{ opacity: 0, y: -20 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    viewport={{ once: true }}
                    transition={{ duration: 0.5, delay: 0.8 }}
                  >
                    <div className="w-20 h-1 bg-gradient-to-r from-transparent via-blue-500 to-transparent rounded-full" />
                  </motion.div>
                </div>
              </motion.div>
            </div>
          </div>
        </section>

        {/* Second Transition: Light to Dark */}
        <section className="relative rotate-180">
          <div className="absolute inset-0 bg-white" />
          <TransitionCurve inverted />
        </section>

        {/* Light Theme Sections - Data & Survey */}
        <section className="bg-[#0c0f1a]  text-white">
          <div className="space-y-32 py-20">
                <KeyFeatures />
                <div className="relative -mx-4"> {/* Adjusted container for FeatureShowcase */}
                  <FeatureSection />
                  <FeatureShowcase />
                </div>
                <ScrollingFeatures />
          </div>
        </section>


        {/* Final Dark Sections */}
        <section className="bg-black text-white relative"> {/* Added text-white */}
          <div className="max-w-7xl mx-auto px-4">
            <div className="space-y-32 py-20">
            </div>
          </div>
        </section>
      </main>
    </div>
  );
}

================
File: app/SurveyInsights.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Book, Users, Globe, ArrowRight, ChevronRight, PieChart as PieChartIcon, BarChart as BarChartIcon, Target } from 'lucide-react';
import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, ResponsiveContainer, Tooltip, LineChart, Line } from 'recharts';

export default function Component() {
  // Using your actual survey data
  const generationDistribution = [
    { name: 'Gen Z', value: 63.16 },
    { name: 'Gen Y', value: 15.79 },
    { name: 'Gen X', value: 21.05 },
  ];

  const difficultyConnecting = [
    { name: 'Gen Z', difficulty: 83.33 },
    { name: 'Gen Y', difficulty: 66.67 },
    { name: 'Gen X', difficulty: 100 },
  ];

  const topImpacts = [
    { name: 'Feeling isolated or misunderstood', percentage: 47.37 },
    { name: 'Difficulty collaborating with colleagues', percentage: 36.84 },
    { name: 'Causing family conflicts', percentage: 31.58 },
    { name: 'Affecting work performance', percentage: 26.32 },
  ];

  const COLORS = ['#3B82F6', '#8B5CF6', '#EC4899', '#6366F1'];

  const fadeInUp = {
    initial: { opacity: 0, y: 30 },
    whileInView: { opacity: 1, y: 0 },
    viewport: { once: true }
  };

  return (
    <section className="relative py-24 overflow-hidden">
      {/* Background Elements */}
      <div className="absolute inset-0 z-0">
        <div className="absolute top-20 left-10 w-72 h-72 bg-blue-200 rounded-full opacity-20 blur-3xl"></div>
        <div className="absolute bottom-20 right-10 w-96 h-96 bg-purple-200 rounded-full opacity-20 blur-3xl"></div>
      </div>

      <div className="relative z-10 max-w-7xl mx-auto px-4">
        {/* Header */}
        <motion.div 
          className="text-center mb-16"
          {...fadeInUp}
          transition={{ duration: 0.6 }}
        >
          <motion.div
            initial={{ scale: 0.5, opacity: 0 }}
            whileInView={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.5 }}
            viewport={{ once: true }}
            className="inline-block"
          >
            <div className="bg-gradient-to-r from-blue-600 via-blue-400 to-purple-400 text-white px-6 py-2 rounded-full text-sm font-semibold mb-4">
              Research-Backed Insights
            </div>
          </motion.div>
          <h2 className="text-5xl font-bold mb-6 bg-clip-text text-transparent bg-gradient-to-r from-blue-600 via-blue-400 to-purple-500">
            Understanding the Problem Size
          </h2>
          <motion.p 
            className="max-w-2xl mx-auto text-gray-600 text-lg"
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            transition={{ delay: 0.3 }}
            viewport={{ once: true }}
          >
            Based on our comprehensive survey of {generationDistribution.reduce((acc, curr) => acc + curr.value, 0).toFixed(0)}% 
            of respondents across three generations
          </motion.p>
        </motion.div>

        {/* Survey Results Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-16">
          {/* Generation Distribution */}
          <motion.div 
            className="bg-white rounded-3xl p-8"
            {...fadeInUp}
            transition={{ duration: 0.6, delay: 0.2 }}
          >
            <div className="flex items-center mb-6">
              <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-500 rounded-xl flex items-center justify-center">
                <PieChartIcon className="w-6 h-6 text-white" />
              </div>
              <h3 className="text-xl font-bold ml-4">Survey Participation by Generation</h3>
            </div>
            <div className="h-[300px]">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={generationDistribution}
                    cx="50%"
                    cy="50%"
                    innerRadius={60}
                    outerRadius={100}
                    fill="#8884d8"
                    paddingAngle={5}
                    dataKey="value"
                    label={({ name, value }) => `${name}: ${value.toFixed(1)}%`}
                  >
                    {generationDistribution.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </motion.div>

          {/* Difficulty Connecting */}
          <motion.div 
            className="bg-white rounded-3xl p-8"
            {...fadeInUp}
            transition={{ duration: 0.6, delay: 0.3 }}
          >
            <div className="flex items-center mb-6">
              <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-500 rounded-xl flex items-center justify-center">
                <BarChartIcon className="w-6 h-6 text-white" />
              </div>
              <h3 className="text-xl font-bold ml-4">Difficulty Connecting Across Generations</h3>
            </div>
            <div className="h-[300px]">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={difficultyConnecting}>
                  <XAxis dataKey="name" />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="difficulty" fill="#3B82F6">
                    {difficultyConnecting.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Bar>
                </BarChart>
              </ResponsiveContainer>
            </div>
          </motion.div>
        </div>

        {/* Key Findings */}
        <motion.div 
          className="bg-gradient-to-br from-blue-500 to-purple-600 rounded-3xl shadow-xl p-8 mb-16 text-white"
          {...fadeInUp}
          transition={{ duration: 0.6, delay: 0.4 }}
        >
          <div className="flex items-center mb-8">
            <div className="w-12 h-12 bg-white/20 rounded-xl flex items-center justify-center">
              <Target className="w-6 h-6 text-white" />
            </div>
            <h3 className="text-2xl font-bold ml-4">Key Impact Areas</h3>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div className="space-y-4">
              {topImpacts.map((impact, index) => (
                <motion.div 
                  key={index}
                  className="bg-white/10 rounded-xl p-4"
                  whileHover={{ x: 10 }}
                  transition={{ type: "spring", stiffness: 300 }}
                >
                  <div className="flex justify-between items-center">
                    <span>{impact.name}</span>
                    <span className="font-bold">{impact.percentage}%</span>
                  </div>
                  <div className="w-full bg-white/20 h-2 rounded-full mt-2">
                    <motion.div 
                      className="bg-white h-full rounded-full"
                      initial={{ width: 0 }}
                      whileInView={{ width: `${impact.percentage}%` }}
                      transition={{ duration: 1, delay: 0.5 + (index * 0.1) }}
                    />
                  </div>
                </motion.div>
              ))}
            </div>
            
            <div className="bg-white/10 rounded-xl p-6">
              <h4 className="text-xl font-bold mb-4">Our Solution Approach</h4>
              <ul className="space-y-4">
                <li className="flex items-center">
                  <ChevronRight className="w-5 h-5 mr-2" />
                  <span>Scientific research-backed insights about behaviors and communication patterns</span>
                </li>
                <li className="flex items-center">
                  <ChevronRight className="w-5 h-5 mr-2" />
                  <span>Focus on Gen Z and Gen Y as primary subjects with {(generationDistribution[0].value + generationDistribution[1].value).toFixed(1)}% coverage</span>
                </li>
                <li className="flex items-center">
                  <ChevronRight className="w-5 h-5 mr-2" />
                  <span>Comprehensive insights about Gen X beliefs and tastes</span>
                </li>
                <li className="flex items-center">
                  <ChevronRight className="w-5 h-5 mr-2" />
                  <span>Privacy-focused data collection through voluntary surveys</span>
                </li>
              </ul>
            </div>
          </div>
        </motion.div>

        {/* Bottom Statement */}
        <motion.div 
          className="text-center max-w-3xl mx-auto"
          {...fadeInUp}
          transition={{ duration: 0.6, delay: 0.6 }}
        >
          <div className="bg-white p-8 rounded-3xl">
            <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center mx-auto mb-6">
              <ArrowRight className="w-8 h-8 text-white" />
            </div>
            <h4 className="text-xl font-bold mb-4 bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-purple-500">
              Our Commitment
            </h4>
            <p className="text-gray-600 leading-relaxed">
              While we acknowledge that no single app can completely bridge the generation gap, 
              our data shows that {topImpacts[0].percentage}% of users feel isolated or misunderstood. 
              We're committed to addressing these challenges through our comprehensive platform that 
              combines slang translation with deep cultural insights, backed by research and user feedback.
            </p>
          </div>
        </motion.div>
      </div>
    </section>
  );
}

================
File: builder-registry.ts
================
"use client";
import { builder, Builder } from "@builder.io/react";
import { AnimatedCursor } from "./components/ui/AnimatedCursor";
import Counter from "./components/Counter/Counter";

builder.init(process.env.NEXT_PUBLIC_BUILDER_API_KEY!);

Builder.registerComponent(Counter, {
  name: "Counter",
  inputs: [
    {
      name: "initialCount",
      type: "number",
    },
  ],
});

Builder.registerComponent(AnimatedCursor, {
  name: "AnimatedCursor",
});

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

================
File: components/AnimatedBackground.tsx
================
import { motion } from 'framer-motion';
import { useEffect, useState } from 'react';

const AnimatedBackground = () => {
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });

  useEffect(() => {
    const handleMouseMove = (e) => {
      setMousePosition({ x: e.clientX, y: e.clientY });
    };

    window.addEventListener('mousemove', handleMouseMove);
    return () => window.removeEventListener('mousemove', handleMouseMove);
  }, []);

  return (
    <div className="fixed inset-0 bg-black overflow-hidden">
      {/* Animated gradient orbs */}
      <motion.div
        className="absolute w-[500px] h-[500px] rounded-full opacity-20 blur-3xl"
        animate={{
          x: mousePosition.x - 250,
          y: mousePosition.y - 250,
        }}
        transition={{ type: "spring", damping: 10, stiffness: 50 }}
        style={{
          background: 'radial-gradient(circle, rgba(59,130,246,0.5) 0%, rgba(147,51,234,0.3) 50%, rgba(0,0,0,0) 100%)',
        }}
      />

      {/* Fixed position gradients */}
      <div className="absolute top-0 left-0 w-full h-full">
        <div className="absolute top-[10%] left-[20%] w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse" />
        <div className="absolute bottom-[20%] right-[10%] w-96 h-96 bg-purple-500/10 rounded-full blur-3xl animate-pulse" 
             style={{ animationDelay: '1s' }} />
      </div>

      {/* Grid overlay */}
      <div className="absolute inset-0 bg-[linear-gradient(rgba(255,255,255,0.02)_1px,transparent_1px),linear-gradient(90deg,rgba(255,255,255,0.02)_1px,transparent_1px)] bg-[size:50px_50px]" />

      {/* Animated particles */}
      <div className="absolute inset-0">
        {Array.from({ length: 20 }).map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-1 h-1 bg-white rounded-full"
            initial={{
              x: Math.random() * window.innerWidth,
              y: Math.random() * window.innerHeight,
              opacity: Math.random() * 0.5 + 0.3,
            }}
            animate={{
              y: [null, Math.random() * window.innerHeight],
              opacity: [null, Math.random() * 0.5 + 0.3],
            }}
            transition={{
              duration: Math.random() * 10 + 10,
              repeat: Infinity,
              ease: "linear",
            }}
          />
        ))}
      </div>
      
      {/* Vignette effect */}
      <div className="absolute inset-0 bg-[radial-gradient(circle_at_center,transparent_0%,rgba(0,0,0,0.5)_100%)]" />
    </div>
  );
};

export default AnimatedBackground;

================
File: components/builder.tsx
================
"use client";
import { ComponentProps } from "react";
import { BuilderComponent, useIsPreviewing } from "@builder.io/react";
import { BuilderContent, builder } from "@builder.io/sdk";
import DefaultErrorPage from "next/error";
import "../builder-registry";

type BuilderPageProps = ComponentProps<typeof BuilderComponent>;

// Builder Public API Key set in .env file
builder.init(process.env.NEXT_PUBLIC_BUILDER_API_KEY!);

export function RenderBuilderContent({ content, model }: BuilderPageProps) {
  // Call the useIsPreviewing hook to determine if
  // the page is being previewed in Builder
  const isPreviewing = useIsPreviewing();
  // If "content" has a value or the page is being previewed in Builder,
  // render the BuilderComponent with the specified content and model props.
  if (content || isPreviewing) {
    return <BuilderComponent content={content} model={model} />;
  }
  // If the "content" is falsy and the page is
  // not being previewed in Builder, render the
  // DefaultErrorPage with a 404.
  return <DefaultErrorPage statusCode={404} />;
}

================
File: components/Counter/Counter.tsx
================
"use client";
import React, { useState } from "react";
import styles from "./styles.module.css";

interface CounterProps {
  initialCount?: number;
}

function Counter({ initialCount = 99 }: CounterProps) {
  const [count, setCount] = useState(initialCount);

  const increment = () => {
    setCount((prevCount) => prevCount + 1);
  };

  const decrement = () => {
    setCount((prevCount) => prevCount - 1);
  };

  return (
    <div className={styles.counter}>
      <button className={styles.btn} onClick={decrement}>
        -
      </button>
      <span className={styles.count}>{count}</span>
      <button className={styles.btn} onClick={increment}>
        +
      </button>
    </div>
  );
}

export default Counter;

================
File: components/Counter/styles.module.css
================
.counter {
  margin: 32px auto;
  display: flex;
  width: 100%;
  max-width: 190px;
}

.btn {
  width: 42px;
  font-size: 32px;
  font-weight: bold;
  background-color: #1c6bd1;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  line-height: 1.4;
}

.btn:hover {
  opacity: 0.8;
}

.count {
  flex: 1;
  font-size: 42px;
  text-align: center;
}

================
File: components/features/FeatureSection.tsx
================
import React from 'react'
import { motion, useScroll, useTransform } from 'framer-motion'
import { CheckCircle } from 'lucide-react'
import Image from 'next/image'

const mockupImages = [
  "/assets/mck23.png",
  "/assets/mck72.png",
  "/assets/MCK6-removebg.png"
];

export function FeatureSection() {
  return (
    <div className="min-h-screen bg-[#0c0f1a] text-white overflow-hidden">
      <div className="max-w-[1920px] mx-auto px-6 lg:px-24 py-24 space-y-48">
        {/* First Two Features */}
        <FeatureBlock
          title="App Feature Title"
          description="Skibidi toilet yapping fanum tax diddy drake kanye west ligma ball sigma sigma on the wall who the skibidiees of tehm all"
          videoSrc="/assets/Slangs.mov"
          benefits={[
            "Key benefit or feature point one goes here",
            "Key benefit or feature point two goes here"
          ]}
          videoOnLeft={true}
        />

        <FeatureBlock
          title="Another Amazing Feature"
          description="Skibidi toilet yapping fanum tax diddy drake kanye west ligma ball sigma sigma on the wall who the skibidiees of tehm all"
          videoSrc="/assets/Translation.mov"
          benefits={[
            "Additional benefit or feature point one",
            "Additional benefit or feature point two"
          ]}
          videoOnLeft={false}
        />

        {/* First Mockup */}
        <MockupShowcase imageUrl={mockupImages[0]} />

        {/* Next Two Features */}
        <FeatureBlock
          title="Another Amazing Feature"
          description="Skibidi toilet yapping fanum tax diddy drake kanye west ligma ball sigma sigma on the wall who the skibidiees of tehm all"
          videoSrc="/assets/GENAI.mov"
          benefits={[
            "Additional benefit or feature point one",
            "Additional benefit or feature point two"
          ]}
          videoOnLeft={true}
        />

        <FeatureBlock
          title="Another Amazing Feature"
          description="Skibidi toilet yapping fanum tax diddy drake kanye west ligma ball sigma sigma on the wall who the skibidiees of tehm all"
          videoSrc="/assets/Botto(Gen AI).mov"
          benefits={[
            "Additional benefit or feature point one",
            "Additional benefit or feature point two"
          ]}
          videoOnLeft={false}
        />

        {/* Second Mockup */}
        <MockupShowcase imageUrl={mockupImages[1]} reverse={true} />

        {/* Final Feature */}
        <FeatureBlock
          title="Another Amazing Feature"
          description="Skibidi toilet yapping fanum tax diddy drake kanye west ligma ball sigma sigma on the wall who the skibidiees of tehm all"
          videoSrc="/assets/Insights.mov"
          benefits={[
            "Additional benefit or feature point one",
            "Additional benefit or feature point two"
          ]}
          videoOnLeft={true}
        />

        {/* Final Mockup */}
        <MockupShowcase imageUrl={mockupImages[2]} />
      </div>
    </div>
  )
}

function MockupShowcase({ imageUrl, reverse = false }) {
  const ref = React.useRef(null);
  const { scrollYProgress } = useScroll({
    target: ref,
    offset: ["start end", "end start"]
  });

  const scale = useTransform(scrollYProgress, [0, 0.5, 1], [0.8, 1, 0.8]);
  const opacity = useTransform(scrollYProgress, [0, 0.5, 1], [0.3, 1, 0.3]);
  const rotateY = useTransform(scrollYProgress, [0, 0.5, 1], [-15, 0, 15]);
  const translateY = useTransform(scrollYProgress, [0, 0.5, 1], [100, 0, -100]);

  return (
    <motion.div 
      ref={ref}
      className="relative w-full h-screen flex items-center justify-center"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 1 }}
    >
      {/* Phone Frame Container */}
      <motion.div
        className="relative w-full max-w-6xl px-6 preserve-3d"
        style={{
          scale,
          opacity,
          rotateY,
          y: translateY,
        }}
      >
        {/* Floating Elements */}
        <motion.div
          className="absolute -left-10 top-1/4 w-20 h-20 rounded-full"
          animate={{
            y: [-20, 20, -20],
            x: [-10, 10, -10],
            scale: [1, 1.1, 1],
          }}
          transition={{
            duration: 5,
            repeat: Infinity,
            ease: "easeInOut",
          }}
          style={{
            background: 'radial-gradient(circle, rgba(59,130,246,0.1) 0%, rgba(59,130,246,0) 70%)',
          }}
        />

        <motion.div
          className="absolute -right-10 bottom-1/4 w-20 h-20 rounded-full"
          animate={{
            y: [20, -20, 20],
            x: [10, -10, 10],
            scale: [1.1, 1, 1.1],
          }}
          transition={{
            duration: 5,
            repeat: Infinity,
            ease: "easeInOut",
            delay: 0.5,
          }}
          style={{
            background: 'radial-gradient(circle, rgba(59,130,246,0.1) 0%, rgba(59,130,246,0) 70%)',
          }}
        />

        {/* Main Image Container */}
        <motion.div 
          className="relative aspect-[16/9] w-full"
          whileHover={{ scale: 1.02 }}
          transition={{ duration: 0.3 }}
        >
          <Image
            src={imageUrl}
            alt="App Mockup"
            fill
            className="object-contain"
            style={{ 
              transform: reverse ? 'scale(-1, 1)' : 'none',
              backgroundColor: 'transparent'
            }}
          />

          {/* Shine Effect */}
          <motion.div
            className="absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-0"
            animate={{
              opacity: [0, 0.1, 0],
              x: [-500, 500, -500],
            }}
            transition={{
              duration: 3,
              repeat: Infinity,
              ease: "easeInOut",
              delay: 1,
            }}
          />
        </motion.div>

        {/* Interactive Elements */}
        <motion.div
          className="absolute -bottom-10 left-1/2 transform -translate-x-1/2 flex gap-2"
          animate={{
            y: [-5, 5, -5],
          }}
          transition={{
            duration: 2,
            repeat: Infinity,
            ease: "easeInOut",
          }}
        >
          <motion.div 
            className="w-2 h-2 rounded-full bg-blue-500/20"
            whileHover={{ scale: 1.5, backgroundColor: "rgba(59,130,246,0.4)" }}
          />
          <motion.div 
            className="w-2 h-2 rounded-full bg-blue-500/20"
            whileHover={{ scale: 1.5, backgroundColor: "rgba(59,130,246,0.4)" }}
          />
          <motion.div 
            className="w-2 h-2 rounded-full bg-blue-500/20"
            whileHover={{ scale: 1.5, backgroundColor: "rgba(59,130,246,0.4)" }}
          />
        </motion.div>
      </motion.div>
    </motion.div>
  )
}

function FeatureBlock({ title, description, videoSrc, benefits, videoOnLeft }) {
  return (
    <div className="grid md:grid-cols-2 gap-16 lg:gap-24 items-center">
      {videoOnLeft ? (
        <VideoSection videoSrc={videoSrc} />
      ) : (
        <ContentSection title={title} description={description} benefits={benefits} />
      )}
      {videoOnLeft ? (
        <ContentSection title={title} description={description} benefits={benefits} />
      ) : (
        <VideoSection videoSrc={videoSrc} />
      )}
    </div>
  )
}

function VideoSection({ videoSrc }) {
  return (
    <motion.div
      className="w-full flex justify-center"
      initial={{ opacity: 0, scale: 0.8 }}
      whileInView={{ opacity: 1, scale: 1 }}
      viewport={{ once: true }}
      transition={{ duration: 0.6 }}
    >
      <div className="w-full max-w-[500px] rounded-2xl overflow-hidden">
        <video 
          src={videoSrc} 
          className="w-full h-full object-cover"
          autoPlay
          loop
          muted
          playsInline
        />
      </div>
    </motion.div>
  )
}

function ContentSection({ title, description, benefits }) {
  return (
    <motion.div 
      className="space-y-8"
      initial={{ opacity: 0, y: 20 }}
      whileInView={{ opacity: 1, y: 0 }}
      viewport={{ once: true }}
      transition={{ duration: 0.6 }}
    >
      <h2 className="text-4xl lg:text-5xl font-bold text-white leading-tight">
        {title}
      </h2>
      <p className="text-xl text-gray-300">
        {description}
      </p>
      <ul className="space-y-6">
        {benefits.map((benefit, index) => (
          <motion.li 
            key={index} 
            className="flex items-start gap-4"
            initial={{ opacity: 0, x: -20 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6, delay: index * 0.2 }}
          >
            <CheckCircle className="w-6 h-6 text-green-400 mt-1 flex-shrink-0" />
            <span className="text-lg text-gray-300">
              {benefit}
            </span>
          </motion.li>
        ))}
      </ul>
    </motion.div>
  )
}

================
File: components/features/FeatureShowcase.tsx
================
import Image from 'next/image'
import { motion } from 'framer-motion'

export function FeatureShowcase() {
  return (
    <div className="bg-black text-white min-h-screen">
      {/* Hero Section */}
      <section className="relative h-screen flex items-center justify-center overflow-hidden">
        {/* Background Animation */}
        <motion.div
          className="absolute inset-0 z-0"
          animate={{
            background: [
              "radial-gradient(circle, rgba(29,78,216,0.15) 0%, rgba(0,0,0,0) 70%)",
              "radial-gradient(circle, rgba(220,38,38,0.15) 0%, rgba(0,0,0,0) 70%)",
              "radial-gradient(circle, rgba(16,185,129,0.15) 0%, rgba(0,0,0,0) 70%)",
            ],
          }}
          transition={{
            duration: 10,
            repeat: Infinity,
            repeatType: "reverse",
          }}
        />

        {/* Image Container */}
        <motion.div
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 1 }}
          className="relative w-full h-full"
        >
          <Image
            src="/assets/MCK5.png"
            alt="App Interface Showcase"
            layout="fill"
            objectFit="cover"
            className="z-10"
          />
        </motion.div>
      </section>
    </div>
  )
}

================
File: components/features/FinalProductShowcase.tsx
================
import { motion } from "framer-motion";
import Image from "next/image";
import { CheckCircle } from "lucide-react";

const finalFeatures = [
  {
    title: "Instant Slang Translation",
    description: [
      "Real-time translation of generational slang and phrases",
      "Context-aware interpretations for accurate understanding",
      "Multi-generational language support",
      "Customizable translation preferences"
    ],
    image: "/assets/TRANSLATE.png"
  },
  {
    title: "Generational Insights Dashboard",
    description: [
      "Comprehensive overview of each generation's characteristics",
      "Interactive timelines of major cultural events",
      "Trend analysis and prediction",
      "Customizable insights based on your interests"
    ],
    image: "/assets/INSIGHTS.png"
  },
  {
    title: "Cross-Generational Forums",
    description: [
      "Moderated discussion spaces for intergenerational dialogue",
      "Topic-based threads for shared experiences",
      "Real-time translation in discussions",
      "Community-driven content and insights"
    ],
    image: "/assets/HIGHLIGHTS.png"
  }
];

export function FinalProductShowcase() {
    return (
      <section className="relative py-24 overflow-hidden">
        {/* Background glow effects */}
        <div className="absolute inset-0 blur-3xl opacity-30">
          <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-blue-500 rounded-full" />
          <div className="absolute top-1/4 right-1/4 w-64 h-64 bg-purple-500 rounded-full" />
        </div>
  
        <div className="relative max-w-4xl mx-auto text-center">
          <motion.span
            className="inline-block mb-4 px-4 py-1.5 bg-gray-800 rounded-full text-sm font-medium text-gray-100"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            FINAL PRODUCT
          </motion.span>
  
          <motion.h2
            className="text-5xl sm:text-6xl font-bold mb-6 bg-clip-text text-transparent bg-gradient-to-r from-gray-100 via-blue-100 to-gray-100"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
          >
            Connect with your friend anywhere in the world!
          </motion.h2>
  
          <motion.p
            className="text-lg sm:text-xl text-gray-300 max-w-2xl mx-auto"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            After 48 hours, including a heuristic evaluation, we successfully delivered the MVP for Globond.
          </motion.p>
        </div>
      </section>
    );
  }

================
File: components/features/KeyFeatures.tsx
================
import { motion } from "framer-motion";
import { MessageCircle, Book, Zap, Users, Globe, Star } from "lucide-react";
import { ParallaxSection } from "@/components/ui/ParallaxSection";

const featuresList = [
  { name: "Slang Translator", icon: MessageCircle },
  { name: "Cultural Insights", icon: Book },
  { name: "Trend Analysis", icon: Zap },
  { name: "Community Forums", icon: Users },
  { name: "Historical Timeline", icon: Globe },
  { name: "Generational Quiz", icon: Star },
];

export function KeyFeatures() {
    return (
      <ParallaxSection>
        <motion.section
          className="mb-16"
          initial={{ opacity: 0, y: 50 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          viewport={{ once: true }}
        >
          <h3 className="text-2xl font-bold mb-8 text-center text-white">
            Key Features
          </h3>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-8">
            {featuresList.map((feature, index) => (
              <motion.div
                key={index}
                className="text-center"
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              >
                <div className="bg-white/10 rounded-full p-4 mb-4 inline-block text-blue-400">
                  <feature.icon className="w-8 h-8" />
                </div>
                <p className="font-semibold text-gray-200">{feature.name}</p>
              </motion.div>
            ))}
          </div>
        </motion.section>
      </ParallaxSection>
    );
  }

================
File: components/features/ScrollingFeatures.tsx
================
import { motion, useScroll, useTransform } from "framer-motion";
import Image from "next/image";
import { useRef } from "react";
import { features } from "@/constants/features";

export function ScrollingFeatures() {
  const sectionRef = useRef(null);
  const { scrollYProgress } = useScroll({
    target: sectionRef,
    offset: ["start end", "end start"],
  });

  const x1 = useTransform(scrollYProgress, [0, 1], [0, -500]);
  const x2 = useTransform(scrollYProgress, [0, 1], [0, 500]);

  return (
    <section ref={sectionRef} className="py-16 overflow-hidden">
      <motion.h2
        className="text-3xl font-bold mb-8 text-center"
        initial={{ opacity: 0, y: 50 }}
        whileInView={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        App Features
      </motion.h2>
      <div className="space-y-8">
        <motion.div className="flex whitespace-nowrap" style={{ x: x1 }}>
          {[...features, ...features].map((feature, index) => (
            <motion.div
              key={index}
              className="flex-shrink-0 w-[150px] mx-2"
              whileHover={{ scale: 1.05 }}
              transition={{ duration: 0.2 }}
            >
              <Image
                src={feature.src}
                alt={feature.name}
                width={150}
                height={300}
                objectFit="cover"
                className="bg-transparent"
              />
              <p className="text-center text-sm font-medium">{feature.name}</p>
            </motion.div>
          ))}
        </motion.div>
        <motion.div className="flex whitespace-nowrap" style={{ x: x2 }}>
          {[...features, ...features].map((feature, index) => (
            <motion.div
              key={index}
              className="flex-shrink-0 w-[150px] mx-2"
              whileHover={{ scale: 1.05 }}
              transition={{ duration: 0.2 }}
            >
              <Image
                src={feature.src}
                alt={feature.name}
                width={150}
                height={300}
                objectFit="cover"
                className="rounded-lg mb-2 bg-transparent"
              />
              <p className="text-center text-sm font-medium">{feature.name}</p>
            </motion.div>
          ))}
        </motion.div>
      </div>
    </section>
  );
}

================
File: components/layout/AppDetails.tsx
================
"use client"

import { motion } from "framer-motion"
import { ParallaxSection } from "@/components/ui/ParallaxSection"

export function AppDetails() {
  return (
    <ParallaxSection>
      <motion.section
        className="bg-gray-800 py-12 px-6 rounded-3xl mb-16 shadow-lg text-gray-100"
        initial={{ opacity: 0, y: 50 }}
        whileInView={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        viewport={{ once: true }}
      >
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto">
          <div>
            <motion.h2
              className="text-3xl font-bold mb-4"
              initial={{ opacity: 0, x: -20 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              GenXYZ
            </motion.h2>
            <motion.div
              className="mb-4"
              initial={{ opacity: 0, x: -20 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5, delay: 0.3 }}
            >
              <h3 className="text-gray-400">Platform</h3>
              <p>iOS & Android</p>
            </motion.div>
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5, delay: 0.4 }}
            >
              <h3 className="text-gray-400">Launch Date</h3>
              <p>Coming Soon</p>
            </motion.div>
          </div>
          <div className="md:col-span-2">
            <motion.p
              className="mb-6 text-lg"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              GenXYZ is designed to bridge the communication gap between
              generations. Our app offers real-time slang translation, cultural
              insights, and historical context to help users understand and
              connect across age groups.
            </motion.p>
            <motion.p
              className="mb-6 text-lg"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.3 }}
            >
              From decoding the latest Gen Z lingo to explaining Boomer
              references, GenXYZ provides a comprehensive suite of tools to
              enhance intergenerational communication and understanding.
            </motion.p>
          </div>
        </div>
      </motion.section>
    </ParallaxSection>
  )
}

================
File: components/layout/AppInterface.tsx
================
// src/components/layout/AppInterface.tsx
import { motion } from "framer-motion";
import Image from "next/image";
import { ParallaxSection } from "@/components/ui/ParallaxSection";
import { useState } from "react";

interface FeatureTab {
  id: string;
  title: string;
  description: string;
  image: string;
  color: string;
}

const featureTabs: FeatureTab[] = [
  {
    id: "translator",
    title: "Slang Translator",
    description: "Instantly translate generational slang and phrases with context-aware interpretations.",
    image: "/assets/TRANSLATE.png",
    color: "from-blue-400 to-blue-600"
  },
  {
    id: "insights",
    title: "Generation Insights",
    description: "Explore detailed analytics and insights about different generations' communication patterns.",
    image: "/assets/INSIGHTS.png",
    color: "from-purple-400 to-purple-600"
  },
  {
    id: "highlights",
    title: "Cultural Highlights",
    description: "Discover key cultural touchstones and references from each generation.",
    image: "/assets/HIGHLIGHTS.png",
    color: "from-green-400 to-green-600"
  }
];

export function AppInterface() {
  const [activeTab, setActiveTab] = useState<string>(featureTabs[0].id);
  const [isHovered, setIsHovered] = useState<string | null>(null);

  const activeFeature = featureTabs.find(tab => tab.id === activeTab);

  return (
    <ParallaxSection>
      <div className="max-w-6xl mx-auto px-4">
        {/* Main Interface Display */}
        <motion.section
            className="relative w-full max-w-md mx-auto aspect-[9/16] rounded-[2.5rem] overflow-hidden mb-16 shadow-2xl bg-gradient-to-br from-gray-900 to-gray-800"
            initial={{ opacity: 0, scale: 0.9 }}
            whileInView={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.5 }}
            viewport={{ once: true }}
        >
          {/* Phone Frame */}
          <div className="absolute top-0 left-0 right-0 h-6 bg-black rounded-t-[2.5rem] z-20">
            <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-20 h-4 bg-black rounded-full shadow-lg shadow-blue-500/20" />
          </div>

          {/* Dynamic Content */}
          <motion.div
            className="relative w-full h-full"
            key={activeTab}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.3 }}
          >
            <Image
              src={activeFeature?.image || featureTabs[0].image}
              alt={`GenBridge ${activeFeature?.title || 'App'} Interface`}
              layout="fill"
              objectFit="cover"
              className="bg-transparent"
              priority
            />

            {/* Gradient Overlay */}
            <div className={`absolute inset-0 bg-gradient-to-b ${activeFeature?.color || 'from-blue-400 to-blue-600'} opacity-20`} />

            {/* Bottom Content */}
            <motion.div
              className="absolute bottom-0 left-0 right-0 p-8 bg-gradient-to-t from-black/80 via-black/50 to-transparent"
              initial={{ y: 100, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ delay: 0.2 }}
            >
              <h2 className="text-2xl font-bold mb-2 text-white">
                {activeFeature?.title}
              </h2>
              <p className="text-sm text-gray-200 mb-4">
                {activeFeature?.description}
              </p>

              {/* Feature Navigation Dots */}
              <div className="flex justify-center space-x-2 mt-4">
                {featureTabs.map((tab) => (
                  <motion.button
                    key={tab.id}
                    className={`w-2 h-2 rounded-full transition-all duration-300 ${
                      activeTab === tab.id ? 'w-8 bg-white' : 'bg-white/50'
                    }`}
                    onClick={() => setActiveTab(tab.id)}
                    whileHover={{ scale: 1.2 }}
                    whileTap={{ scale: 0.9 }}
                  />
                ))}
              </div>
            </motion.div>
          </motion.div>
        </motion.section>

        {/* Feature Selection Tabs */}
        <motion.div 
          className="grid grid-cols-1 md:grid-cols-3 gap-4 max-w-3xl mx-auto"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
          viewport={{ once: true }}
        >
          {featureTabs.map((tab) => (
            <motion.button
              key={tab.id}
              className={`p-4 rounded-xl transition-all duration-300 ${
                activeTab === tab.id
                  ? `bg-gradient-to-r ${tab.color} text-white`
                  : 'bg-white hover:bg-gray-50'
              }`}
              onClick={() => setActiveTab(tab.id)}
              onMouseEnter={() => setIsHovered(tab.id)}
              onMouseLeave={() => setIsHovered(null)}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <h3 className={`font-semibold ${activeTab === tab.id ? 'text-white' : 'text-gray-900'}`}>
                {tab.title}
              </h3>
              <motion.p 
                className={`text-sm mt-1 ${activeTab === tab.id ? 'text-white/90' : 'text-gray-500'}`}
                initial={{ opacity: 0, height: 0 }}
                animate={{ 
                  opacity: isHovered === tab.id ? 1 : 0,
                  height: isHovered === tab.id ? 'auto' : 0
                }}
                transition={{ duration: 0.2 }}
              >
                {tab.description}
              </motion.p>
            </motion.button>
          ))}
        </motion.div>
      </div>
    </ParallaxSection>
  );
}

================
File: components/layout/CallToAction.tsx
================
import { motion } from "framer-motion";
import { Download } from "lucide-react";
import { ParallaxSection } from "@/components/ui/ParallaxSection";

export function CallToAction() {
  return (
    <ParallaxSection>
      <motion.section
        className="text-center mb-16"
        initial={{ opacity: 0, y: 50 }}
        whileInView={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        viewport={{ once: true }}
      >
        <h2 className="text-3xl font-bold mb-8 text-gray-900">Try it?</h2>
        <p className="text-xl mb-8 text-gray-600">
          Try our app UI now and start connecting across age gaps!
        </p>
        <div className="flex flex-wrap justify-center gap-4">
          <motion.button
            className="bg-black text-white font-bold py-3 px-8 rounded-full flex items-center"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Download className="w-5 h-5 mr-2" />
            lores
          </motion.button>
          <motion.button
            className="bg-green-500 text-white font-bold py-3 px-8 rounded-full flex items-center"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Download className="w-5 h-5 mr-2" />
            lores
          </motion.button>
        </div>
      </motion.section>
    </ParallaxSection>
  );
}

================
File: components/layout/HeroSection.tsx
================
import { motion } from "framer-motion";
import Image from "next/image";

export function HeroSection() {
  return (
    <section className="relative min-h-screen flex flex-col items-center justify-center overflow-hidden py-20">
      {/* Background gradient */}
      <div className="absolute inset-0 to-transparent" />
  
      <div className="container mx-auto px-4 z-10">
        {/* Image Section - Now Larger */}
        <motion.div
          className="flex justify-center mb-16"
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.8, delay: 0.2 }}
        >
          <div className="w-full max-w-[1400px]"> {/* Increased max-width */}
            <Image
              src="/assets/MCK4.png"
              alt="GenBridge App Mockup"
              width={2000}
              height={1400}
              className="w-full h-auto bg-transparent"
              style={{ backgroundColor: 'transparent' }}
              priority
            />
          </div>
        </motion.div>

        {/* Text Section - Now below image */}
        <div className="text-center">
          <motion.h1
            className="text-6xl md:text-8xl font-bold mb-8 text-white bg-clip-text text-transparent bg-gradient-to-r from-white via-gray-200 to-white"
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.4 }}
          >
            GenXYZ
          </motion.h1>

          <motion.p
            className="text-xl md:text-2xl text-gray-200 max-w-2xl mx-auto"
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.6 }}
          >
            Bridge the gap between generations with slang translations and cultural insights
          </motion.p>
        </div>
      </div>

      {/* Enhanced gradient glow */}
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[800px] h-[800px] bg-gradient-radial from-blue-500/10 via-purple-500/5 to-transparent blur-2xl" />
      </div>
    </section>
  );
}

================
File: components/layout/OverlaySectionDivider.tsx
================
// components/layout/OverlaySectionDivider.tsx
import { motion } from 'framer-motion';
import Image from 'next/image';

export function OverlaySectionDivider() {
    return (
        <div className="relative min-h-screen w-full -my-1">
          <Image
            src="/assets/mck12.png"
            alt="App Interface Mockup"
            layout="fill"
            objectFit="cover"
            className="opacity-100"
            priority
          />
          <div className="absolute inset-0 bg-gradient-to-b from-white via-transparent to-white" />
        </div>
      );
}

================
File: components/layout/TransitionCurve.tsx
================
import { motion } from 'framer-motion';

interface TransitionCurveProps {
  inverted?: boolean;
}

export const TransitionCurve: React.FC<TransitionCurveProps> = ({ inverted = false }) => {
  return (
    <div className="relative">
      <div className={`h-[200px] w-full overflow-hidden ${inverted ? 'rotate-180' : ''}`}>
        <svg
          viewBox="0 0 1440 250"
          preserveAspectRatio="none"
          className="absolute w-full h-full"
        >
          <path
            d="M0,192L60,186.7C120,181,240,171,360,181.3C480,192,600,224,720,229.3C840,235,960,213,1080,181.3C1200,149,1320,107,1380,85.3L1440,64L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z"
            className={`${inverted ? 'fill-[#111827]' : 'fill-white'}`}
            style={{
              opacity: 1
            }}
          />
          <path
            d="M0,160L60,160C120,160,240,160,360,165.3C480,171,600,181,720,192C840,203,960,213,1080,197.3C1200,181,1320,139,1380,117.3L1440,96L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z"
            className={`${inverted ? 'fill-[#111827]' : 'fill-white'}`}
            style={{
              opacity: 0.7
            }}
          />
          <path
            d="M0,224L60,234.7C120,245,240,267,360,266.7C480,267,600,245,720,224C840,203,960,181,1080,181.3C1200,181,1320,203,1380,213.3L1440,224L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z"
            className={`${inverted ? 'fill-[#111827]' : 'fill-white'}`}
            style={{
              opacity: 0.5
            }}
          />
        </svg>
      </div>
    </div>
  );
};

================
File: components/Mockups/Fullmockup1.tsx
================
import React from 'react';
import Image from 'next/image';
import { motion } from 'framer-motion';

export default function FullMockup() {
  return (
    <section className="relative flex items-center justify-center py-12 bg-black overflow-hidden">
      {/* Background gradient */}
      <div className="absolute inset-0">
        <div className="absolute inset-0 bg-gradient-to-b from-blue-500/10 via-purple-500/5 to-transparent opacity-30" />
      </div>
      
      {/* Content container */}
      <div className="container relative z-10 px-0">
        
        {/* Large image */}
        <motion.div
          className="relative w-full max-w-48xl mx-auto"
          initial={{ opacity: 0, y: 40 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
          viewport={{ once: true }}
        >
          <div className="relative aspect-[16/9] w-full">
            <Image
              src="/assets/MCK3.png"
              alt="GenXYZ Platform Mockup"
              fill
              className="object-cover rounded-xl shadow-2xl"
              style={{ backgroundColor: 'transparent' }}
            />
            
            {/* Gradient overlay */}
            <div className="absolute inset-0 bg-gradient-to-b from-transparent via-transparent to-black/20 rounded-xl" />
            
            {/* Floating highlights */}
            <motion.div 
              className="absolute -top-4 -right-4 w-32 h-32 rounded-full blur-2xl"
              animate={{ scale: [1, 1.2, 1], opacity: [0.5, 0.8, 0.5] }}
              transition={{ duration: 4, repeat: Infinity }}
            />
            <motion.div 
              className="absolute -bottom-4 -left-4 h-32 rounded-full blur-2xl"
              animate={{ scale: [1.2, 1, 1.2], opacity: [0.5, 0.8, 0.5] }}
              transition={{ duration: 4, repeat: Infinity }}
            />
          </div>
        </motion.div>
      </div>
    </section>
  );
}

================
File: components/survey/charts/CommunicationEffectiveness.tsx
================
import { ResponsiveContainer, LineChart, Line, XAxis, YAxis, Tooltip, Legend } from 'recharts';
import { communicationEffectiveness } from '@/constants/surveyData';
import { CustomTooltip } from './CustomTooltip';

export function CommunicationEffectiveness() {
  return (
    <div className="bg-white p-8 rounded-3xl shadow-xl">
      <h2 className="text-3xl font-bold mb-6 text-center bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-blue-400">
        Communication Effectiveness
      </h2>
      <ResponsiveContainer width="100%" height={400}>
        <LineChart data={communicationEffectiveness}>
          <XAxis dataKey="name" stroke="#4B5563" angle={-45} textAnchor="end" height={80} />
          <YAxis stroke="#4B5563" />
          <Tooltip content={<CustomTooltip />} />
          <Legend />
          <Line type="monotone" dataKey="score" stroke="#3B82F6" strokeWidth={2}>
            <animate attributeName="stroke-dashoffset" from="1000" to="0" dur="2s" />
          </Line>
        </LineChart>
      </ResponsiveContainer>
    </div>
  );
}

================
File: components/survey/charts/CustomTooltip.tsx
================
interface CustomTooltipProps {
    active?: boolean;
    payload?: any[];
    label?: string;
  }
  
  export function CustomTooltip({ active, payload, label }: CustomTooltipProps) {
    if (active && payload && payload.length) {
      return (
        <div className="bg-white p-4 rounded-lg shadow-lg border border-blue-200">
          <p className="text-gray-900 font-semibold">{`${label} : ${payload[0].value}`}</p>
        </div>
      );
    }
    return null;
  }

================
File: components/survey/charts/DifficultyConnecting.tsx
================
import { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip, Legend, Cell } from 'recharts';
import { COLORS, difficultyConnecting } from '@/constants/surveyData';
import { CustomTooltip } from './CustomTooltip';

export function DifficultyConnecting() {
  return (
    <div className="bg-white p-8 rounded-3xl shadow-xl">
      <h2 className="text-3xl font-bold mb-6 text-center bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-blue-400">
        Difficulty Connecting with Other Generations
      </h2>
      <ResponsiveContainer width="100%" height={400}>
        <BarChart data={difficultyConnecting}>
          <XAxis dataKey="name" stroke="#4B5563" />
          <YAxis stroke="#4B5563" />
          <Tooltip content={<CustomTooltip />} />
          <Legend />
          <Bar dataKey="difficulty" fill="#3B82F6">
            {difficultyConnecting.map((entry, index) => (
              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]}>
                <animate attributeName="height" from="0" to={entry.difficulty} dur="1s" />
              </Cell>
            ))}
          </Bar>
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
}

================
File: components/survey/charts/GenerationDistribution.tsx
================
import { ResponsiveContainer, PieChart, Pie, Cell, Tooltip, Legend } from 'recharts';
import { COLORS, generationDistribution } from '@/constants/surveyData';
import { CustomTooltip } from '@/components/survey/charts/CustomTooltip';

export function GenerationDistribution() {
  return (
    <div className="bg-white p-8 rounded-3xl shadow-xl">
      <h2 className="text-3xl font-bold mb-6 text-center bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-blue-400">
        Generation Distribution
      </h2>
      <div className="flex items-center justify-center">
        <ResponsiveContainer width="100%" height={400}>
          <PieChart>
            <Pie
              data={generationDistribution}
              cx="50%"
              cy="50%"
              labelLine={false}
              outerRadius={150}
              fill="#8884d8"
              dataKey="value"
              label={({ name, value }) => `${name}: ${value.toFixed(2)}%`}
            >
              {generationDistribution.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
              ))}
            </Pie>
            <Tooltip content={<CustomTooltip />} />
            <Legend />
          </PieChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
}

================
File: components/survey/charts/TopImpacts.tsx
================
import { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip, Legend, Cell } from 'recharts';
import { COLORS, topImpacts } from '@/constants/surveyData';
import { CustomTooltip } from './CustomTooltip';

export function TopImpacts() {
  return (
    <div className="bg-white p-8 rounded-3xl shadow-xl">
      <h2 className="text-3xl font-bold mb-6 text-center bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-blue-400">
        Top Impacts of Generational Gap
      </h2>
      <ResponsiveContainer width="100%" height={400}>
        <BarChart data={topImpacts} layout="vertical">
          <XAxis type="number" stroke="#4B5563" />
          <YAxis dataKey="name" type="category" width={150} stroke="#4B5563" />
          <Tooltip content={<CustomTooltip />} />
          <Legend />
          <Bar dataKey="percentage" fill="#3B82F6">
            {topImpacts.map((entry, index) => (
              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]}>
                <animate attributeName="width" from="0" to={entry.percentage} dur="1s" />
              </Cell>
            ))}
          </Bar>
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
}

================
File: components/survey/interviews/UserInterviews.tsx
================
// src/components/survey/interviews/UserInterviews.tsx
import { useState, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Avatar } from '@/components/ui/avatar';
import { ChevronDown, User, MessageCircle, Calendar } from 'lucide-react';
import type { Interview } from '@/types';

const interviews: Interview[] = [
  {
    name: 'Le Thi Hong Nhung',
    generation: 'Gen Y',
    role: 'Marketing Manager',
    experience: '8 years',
    avatar: '/placeholder.svg?height=40&width=40',
    quote: "It's hard to communicate because of the generational differences. Gen X bosses always say, \"We used to do it this way before, why change now?\" while Gen Z colleagues want to follow every new trend. I often feel caught in the middle, struggling to bridge the gap.",
    tags: ['Communication', 'Workplace', 'Change Management'],
    date: 'March 2024'
  },
  {
    name: 'Le Thi Nga',
    generation: 'Gen X',
    role: 'Senior Director',
    experience: '15 years',
    avatar: '/placeholder.svg?height=40&width=40',
    quote: 'I find it challenging to keep up with the rapidly changing slang used by younger generations, especially in professional settings. The company has hired many young employees who often propose ideas that I find too risky. It makes me feel outdated.',
    tags: ['Professional Environment', 'Language Barrier', 'Risk Assessment'],
    date: 'March 2024'
  },
  {
    name: 'Nguyen Duc Minh',
    generation: 'Gen Z',
    role: 'Software Developer',
    experience: '2 years',
    avatar: '/placeholder.svg?height=40&width=40',
    quote: "I love programming and want to pursue a career in IT, but older generations don't understand my passion. They think I'm just playing games all day. Sometimes I use internet slang or memes in conversations, and they don't get the references, which leads to misunderstandings.",
    tags: ['Technology', 'Career Growth', 'Cultural References'],
    date: 'March 2024'
  }
];

export function UserInterviews() {
  const [selectedInterview, setSelectedInterview] = useState<number | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterGeneration, setFilterGeneration] = useState<string | null>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  const filteredInterviews = interviews.filter(interview => {
    const matchesSearch = interview.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      interview.quote.toLowerCase().includes(searchTerm.toLowerCase()) ||
      interview.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));
    
    const matchesGeneration = filterGeneration ? interview.generation === filterGeneration : true;
    
    return matchesSearch && matchesGeneration;
  });

  const generations = Array.from(new Set(interviews.map(i => i.generation)));

  return (
    <div className="bg-white p-8 rounded-3xl shadow-xl" ref={containerRef}>
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <h2 className="text-3xl font-bold mb-8 text-center bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-blue-400">
          User Interviews
        </h2>
        
        <div className="mb-8 space-y-4">
          {/* Search and Filter Controls */}
          <div className="flex flex-wrap gap-4">
            <div className="flex-1">
              <input
                type="text"
                placeholder="Search interviews..."
                className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <div className="flex gap-2">
              {generations.map((gen) => (
                <button
                  key={gen}
                  className={`px-4 py-2 rounded-lg transition-colors ${
                    filterGeneration === gen
                      ? 'bg-blue-500 text-white'
                      : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
                  }`}
                  onClick={() => setFilterGeneration(filterGeneration === gen ? null : gen)}
                >
                  {gen}
                </button>
              ))}
            </div>
          </div>
        </div>

        <div className="space-y-6">
          {filteredInterviews.map((interview, index) => (
            <motion.div
              key={index}
              className="bg-gray-50 rounded-xl shadow-md overflow-hidden"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: index * 0.1 }}
              whileHover={{ scale: 1.01 }}
            >
              <div
                className="p-6 cursor-pointer"
                onClick={() => setSelectedInterview(selectedInterview === index ? null : index)}
              >
                <div className="flex items-start gap-4">
                  <Avatar className="w-12 h-12">
                    <motion.div
                      className="w-full h-full bg-blue-500 rounded-full flex items-center justify-center text-white"
                      whileHover={{ rotate: 360 }}
                      transition={{ duration: 0.5 }}
                    >
                      <User className="w-6 h-6" />
                    </motion.div>
                  </Avatar>
                  
                  <div className="flex-1">
                    <div className="flex items-center justify-between">
                      <h3 className="text-xl font-semibold text-gray-900">{interview.name}</h3>
                      <motion.div
                        animate={{ rotate: selectedInterview === index ? 180 : 0 }}
                        transition={{ duration: 0.3 }}
                      >
                        <ChevronDown className="w-5 h-5 text-gray-500" />
                      </motion.div>
                    </div>
                    
                    <div className="flex items-center gap-4 text-sm text-gray-600 mt-1">
                      <span className="flex items-center gap-1">
                        <User className="w-4 h-4" />
                        {interview.role}
                      </span>
                      <span className="flex items-center gap-1">
                        <MessageCircle className="w-4 h-4" />
                        {interview.generation}
                      </span>
                      <span className="flex items-center gap-1">
                        <Calendar className="w-4 h-4" />
                        {interview.date}
                      </span>
                    </div>
                  </div>
                </div>

                <AnimatePresence>
                  {selectedInterview === index && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      transition={{ duration: 0.3 }}
                      className="mt-4"
                    >
                      <p className="text-gray-700 mb-4 leading-relaxed">
                        {interview.quote}
                      </p>
                      <div className="flex flex-wrap gap-2">
                        {interview.tags.map((tag, tagIndex) => (
                          <span
                            key={tagIndex}
                            className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm"
                          >
                            {tag}
                          </span>
                        ))}
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            </motion.div>
          ))}
        </div>

        {filteredInterviews.length === 0 && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="text-center py-8 text-gray-500"
          >
            No interviews found matching your criteria.
          </motion.div>
        )}
      </motion.div>
    </div>
  );
}

// Also update the types file with:
// src/types/index.ts (add this interface)
export interface Interview {
  name: string;
  generation: string;
  role: string;
  experience: string;
  avatar: string;
  quote: string;
  tags: string[];
  date: string;
}

================
File: components/survey/KeyMetrics.tsx
================
import { AnimatedNumber } from '@/components/ui/AnimatedNumber';
import { keyMetrics } from '@/constants/surveyData';
import { motion } from "framer-motion"

export function KeyMetrics() {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {keyMetrics.map((metric, index) => (
        <motion.div
          key={index}
          className="bg-white p-6 rounded-3xl shadow-xl overflow-hidden relative"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: index * 0.1 }}
          whileHover={{ 
            boxShadow: "0 0 15px 5px rgba(59, 130, 246, 0.3)", 
            backgroundColor: "rgba(243, 244, 246, 1)",
          }}
        >
          <motion.div
            className="absolute inset-0 bg-gradient-to-br from-blue-400/10 to-blue-600/10 opacity-0"
            whileHover={{ opacity: 1 }}
            transition={{ duration: 0.3 }}
          />
          <h3 className="text-4xl font-bold mb-2 bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-blue-400">
            <AnimatedNumber n={parseFloat(metric.value)} />
            {metric.value.includes('%') ? '%' : ''}
          </h3>
          <h4 className="text-xl font-semibold mb-4 text-gray-700">{metric.metric}</h4>
          <p className="text-gray-600">{metric.description}</p>
        </motion.div>
      ))}
    </div>
  );
}

================
File: components/survey/SurveyDashboard.tsx
================
import { useRef } from 'react';
import { motion, useInView } from 'framer-motion';
import { GenerationDistribution } from './charts/GenerationDistribution';
import { DifficultyConnecting } from './charts/DifficultyConnecting';
import { CommunicationEffectiveness } from './charts/CommunicationEffectiveness';
import { TopImpacts } from './charts/TopImpacts';
import { KeyMetrics } from './KeyMetrics';
import { UserInterviews } from './interviews/UserInterviews';
import Image from 'next/image';

export function SurveyDashboard() {
  // Create refs for each section
  const headerRef = useRef(null);
  const distributionRef = useRef(null);
  const difficultyRef = useRef(null);
  const communicationRef = useRef(null);
  const impactsRef = useRef(null);
  const metricsRef = useRef(null);
  const interviewsRef = useRef(null);

  // Check if each section is in view
  const headerInView = useInView(headerRef, { once: true });
  const distributionInView = useInView(distributionRef, { once: true });
  const difficultyInView = useInView(difficultyRef, { once: true });
  const communicationInView = useInView(communicationRef, { once: true });
  const impactsInView = useInView(impactsRef, { once: true });
  const metricsInView = useInView(metricsRef, { once: true });
  const interviewsInView = useInView(interviewsRef, { once: true });

  return (
    <div className="min-h-screen bg-gradient-to-br from-white via-gray-50 to-white p-8">
      <motion.header 
        ref={headerRef}
        className="flex justify-between items-center mb-12"
        initial={{ opacity: 0, y: -50 }}
        animate={headerInView ? { opacity: 1, y: 0 } : {}}
        transition={{ duration: 0.5 }}
      >
        <div className="flex items-center space-x-4">
          <motion.div 
            className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full"
            animate={{ rotate: 360 }}
            transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
          />
          <h1 className="text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-purple-600">
            GENERATIONAL GAP INSIGHTS
          </h1>
        </div>
      </motion.header>

      <main className="space-y-16">
        <motion.section
          ref={distributionRef}
          initial={{ opacity: 0, y: 50 }}
          animate={distributionInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.5 }}
        >
          <GenerationDistribution />
        </motion.section>

        <motion.section
          ref={difficultyRef}
          initial={{ opacity: 0, y: 50 }}
          animate={difficultyInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.5 }}
        >
          <DifficultyConnecting />
        </motion.section>

        <motion.section
          ref={communicationRef}
          initial={{ opacity: 0, y: 50 }}
          animate={communicationInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.5 }}
        >
          <CommunicationEffectiveness />
        </motion.section>

        <motion.section
          ref={impactsRef}
          initial={{ opacity: 0, y: 50 }}
          animate={impactsInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.5 }}
        >
          <TopImpacts />

          <div className="bg-white text-white min-h-screen">
            {/* Hero Section */}
            <section className="relative h-screen flex items-center justify-center overflow-hidden">
              {/* Background Animation */}
              <motion.div
                className="absolute inset-0 z-0"
                animate={{
                  background: [
                    "radial-gradient(circle, rgba(29,78,216,0.15) 0%, rgba(0,0,0,0) 70%)",
                    "radial-gradient(circle, rgba(220,38,38,0.15) 0%, rgba(0,0,0,0) 70%)",
                    "radial-gradient(circle, rgba(16,185,129,0.15) 0%, rgba(0,0,0,0) 70%)",
                  ],
                }}
                transition={{
                  duration: 10,
                  repeat: Infinity,
                  repeatType: "reverse",
                }}
              />

              {/* Image Container */}
              <motion.div
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 1 }}
                className="relative w-full h-full"
              >
                <Image
                  src="/assets/MCK6-removebg.png"
                  alt="App Interface Showcase"
                  layout="fill"
                  objectFit="cover"
                  className="z-10"
                />
              </motion.div>
            </section>
          </div>

        </motion.section>

        <motion.section 
          ref={metricsRef}
          initial={{ opacity: 0, y: 50 }}
          animate={metricsInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.5 }}
        >
          <KeyMetrics />
        </motion.section>

        <motion.section
          ref={interviewsRef}
          initial={{ opacity: 0, y: 50 }}
          animate={interviewsInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.5 }}
        >

          <UserInterviews />
        </motion.section>
      </main>
    </div>
  );
}

================
File: components/ui/AnimatedCursor.tsx
================
import { motion } from "framer-motion";
import { useMousePosition } from "@/hooks/useMousePosition";
import { useEffect, useState } from 'react';

export function AnimatedCursor() {
  const cursorPosition = useMousePosition();
  const [isHovering, setIsHovering] = useState(false);

  useEffect(() => {
    const handleMouseOver = () => setIsHovering(true);
    const handleMouseOut = () => setIsHovering(false);

    const interactiveElements = document.querySelectorAll(
      "a, button, input, select, textarea"
    );
    
    interactiveElements.forEach((el) => {
      el.addEventListener("mouseover", handleMouseOver);
      el.addEventListener("mouseout", handleMouseOut);
    });

    return () => {
      interactiveElements.forEach((el) => {
        el.removeEventListener("mouseover", handleMouseOver);
        el.removeEventListener("mouseout", handleMouseOut);
      });
    };
  }, []);

  return (
    <>
      <motion.div
        className="fixed w-4 h-4 bg-blue-500 rounded-full pointer-events-none z-50"
        animate={{
          x: cursorPosition.x,
          y: cursorPosition.y,
          scale: isHovering ? 1.5 : 1,
        }}
        transition={{
          type: "spring",
          damping: 30,
          stiffness: 300,
          mass: 0.1,
        }}
      />
      <motion.div
        className="fixed w-8 h-8 bg-blue-200 rounded-full pointer-events-none z-40"
        animate={{
          x: cursorPosition.x,
          y: cursorPosition.y,
          scale: isHovering ? 2 : 1,
        }}
        transition={{
          type: "spring",
          damping: 20,
          stiffness: 200,
          mass: 0.5,
        }}
      />
    </>
  );
}

================
File: components/ui/AnimatedNumber.tsx
================
import { useState, useEffect } from 'react';

interface AnimatedNumberProps {
  n: number;
}

export function AnimatedNumber({ n }: AnimatedNumberProps) {
  const [number, setNumber] = useState(0);
  
  useEffect(() => {
    const timer = setTimeout(() => {
      if (number < n) {
        setNumber(prev => Math.min(prev + 1, n));
      }
    }, 50);
    return () => clearTimeout(timer);
  }, [number, n]);
  
  return <span>{number.toFixed(2)}</span>;
}

================
File: components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/ParallaxSection.tsx
================
import { useEffect, useRef, useState } from "react";
import { motion, useViewportScroll, useTransform } from "framer-motion";

interface ParallaxSectionProps {
  children: React.ReactNode;
  offset?: number;
}

export function ParallaxSection({ children, offset = 50 }: ParallaxSectionProps) {
  const [elementTop, setElementTop] = useState(0);
  const ref = useRef<HTMLDivElement>(null);
  const { scrollY } = useViewportScroll();

  const y = useTransform(
    scrollY,
    [elementTop, elementTop + offset],
    [0, -offset]
  );

  useEffect(() => {
    if (ref.current) {
      setElementTop(ref.current.offsetTop);
    }
  }, [ref]);

  return (
    <motion.div ref={ref} style={{ y }}>
      {children}
    </motion.div>
  );
}

================
File: constants/features.ts
================
export const features = [
    {
      name: "Slang Translator",
      src: "/assets/TRANSLATE.png",
    },
    {
      name: "Generation Insights",
      src: "/assets/INSIGHTS.png",
    },
    {
      name: "Generation Highlights",
      src: "/assets/HIGHLIGHTS.png",
    },
    {
      name: "Featured Post",
      src: "/assets/FEATURED.png",
    },
    {
      name: "Slang Insights",
      src: "/assets/SLANGS.png",
    },
    {
      name: "GEN AI",
      src: "/assets/GENAI.png",
    },
  ];

================
File: constants/surveyData.ts
================
import { GenerationData, DifficultyData, CommunicationData, ImpactData, KeyMetric, Interview } from '@/types';

export const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#EC4899'];

export const generationDistribution: GenerationData[] = [
  { name: 'Gen Z', value: 63.16 },
  { name: 'Gen Y', value: 15.79 },
  { name: 'Gen X', value: 21.05 },
];

export const difficultyConnecting: DifficultyData[] = [
  { name: 'Gen Z', difficulty: 83.33 },
  { name: 'Gen Y', difficulty: 66.67 },
  { name: 'Gen X', difficulty: 100 },
];

export const communicationEffectiveness: CommunicationData[] = [
  { name: 'Gen Z to Gen X', score: 5.67 },
  { name: 'Gen Z to Gen Y', score: 7.58 },
  { name: 'Gen Y to Gen Z', score: 7.00 },
  { name: 'Gen Y to Gen X', score: 8.33 },
  { name: 'Gen X to Gen Y', score: 6.25 },
  { name: 'Gen X to Gen Z', score: 4.25 },
];

export const topImpacts: ImpactData[] = [
  { name: 'Feeling isolated or misunderstood', percentage: 47.37 },
  { name: 'Difficulty collaborating with colleagues', percentage: 36.84 },
  { name: 'Causing family conflicts', percentage: 31.58 },
  { name: 'Affecting work performance', percentage: 26.32 },
  { name: 'No significant impact', percentage: 21.05 },
];

export const keyMetrics: KeyMetric[] = [
  {
    metric: 'Total Participants',
    value: '19',
    description: 'Number of people who took part in the survey'
  },
  {
    metric: 'Gen Z Participants',
    value: '63.16%',
    description: '12 out of 19 participants'
  },
  {
    metric: 'Experiencing Difficulties',
    value: '84.21%',
    description: 'Percentage of participants who face challenges connecting with other generations'
  },
  {
    metric: 'Top Impact',
    value: '47.37%',
    description: 'Feel isolated or misunderstood due to generational gap'
  },
  {
    metric: 'Highest Communication Score',
    value: '8.33',
    description: 'Gen Y to Gen X communication effectiveness'
  },
  {
    metric: 'Lowest Communication Score',
    value: '4.25',
    description: 'Gen X to Gen Z communication effectiveness'
  },
];

export const interviews: Interview[] = [
  {
    name: 'Le Thi Hong Nhung',
    generation: 'Gen Y',
    avatar: '/placeholder.svg?height=40&width=40',
    quote: 'It\'s hard to communicate because of the generational differences. Gen X bosses always say, "We used to do it this way before, why change now?" while Gen Z colleagues want to follow every new trend. I often feel caught in the middle, struggling to bridge the gap.'
  },
  {
    name: 'Le Thi Nga',
    generation: 'Gen X',
    avatar: '/placeholder.svg?height=40&width=40',
    quote: 'I find it challenging to keep up with the rapidly changing slang used by younger generations, especially in professional settings. The company has hired many young employees who often propose ideas that I find too risky. It makes me feel outdated.'
  },
  {
    name: 'Nguyen Duc Minh',
    generation: 'Gen Z',
    avatar: '/placeholder.svg?height=40&width=40',
    quote: 'I love programming and want to pursue a career in IT, but older generations don\'t understand my passion. They think I\'m just playing games all day. Sometimes I use internet slang or memes in conversations, and they don\'t get the references, which leads to misunderstandings.'
  }
];

export const features = [
  {
    name: "Slang Translator",
    src: "/assets/TRANSLATE.png",
    description: "Real-time translation of generational slang and phrases"
  },
  {
    name: "Generation Insights",
    src: "/assets/INSIGHTS.png",
    description: "Comprehensive analysis of generational characteristics"
  },
  {
    name: "Generation Highlights",
    src: "/assets/HIGHLIGHTS.png",
    description: "Key events and trends that shaped each generation"
  },
  {
    name: "Featured Post",
    src: "/assets/FEATURED.png",
    description: "Curated content about intergenerational communication"
  },
  {
    name: "Slang Insights",
    src: "/assets/SLANGS.png",
    description: "Deep dive into popular slang terms and their origins"
  },
  {
    name: "GEN AI",
    src: "/assets/GENAI.png",
    description: "AI-powered generation analysis and predictions"
  },
];

================
File: hooks/useMousePosition.ts
================
import { useState, useEffect } from 'react';

interface MousePosition {
  x: number;
  y: number;
}

export const useMousePosition = () => {
  const [position, setPosition] = useState<MousePosition>({ x: -100, y: -100 });

  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      setPosition({ x: e.clientX, y: e.clientY });
    };

    window.addEventListener("mousemove", handleMouseMove);
    return () => window.removeEventListener("mousemove", handleMouseMove);
  }, []);

  return position;
};

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: next.config.mjs
================
import BuilderDevTools from "@builder.io/dev-tools/next";

/** @type {import('next').NextConfig} */
const nextConfig = BuilderDevTools()({});

export default nextConfig;

================
File: package.json
================
{
  "name": "generational-gap-survey",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@builder.io/dev-tools": "^1.1.24",
    "@builder.io/react": "^5.0.7",
    "@builder.io/sdk": "^3.0.4",
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-icons": "^1.3.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "framer-motion": "^11.11.9",
    "lucide-react": "^0.453.0",
    "next": "14.2.15",
    "react": "^18",
    "react-dom": "^18",
    "recharts": "^2.13.0",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.15",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: public/assets/main.svg
================
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
 "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg version="1.0" xmlns="http://www.w3.org/2000/svg"
 width="486.000000pt" height="856.000000pt" viewBox="0 0 486.000000 856.000000"
 preserveAspectRatio="xMidYMid meet">

<g transform="translate(0.000000,856.000000) scale(0.100000,-0.100000)"
fill="#000000" stroke="none">
<path d="M0 4280 l0 -4280 2430 0 2430 0 0 4280 0 4280 -2430 0 -2430 0 0
-4280z m864 3974 c21 -20 20 -83 -1 -106 -20 -22 -56 -23 -73 -3 -16 19 -5 34
12 17 18 -18 36 -15 48 8 9 16 8 18 -5 14 -8 -4 -26 -3 -40 0 -19 5 -25 13
-25 34 0 15 5 33 12 40 17 17 54 15 72 -4z m188 -36 c2 -29 2 -61 0 -70 -5
-22 -32 -24 -32 -3 0 10 -10 15 -30 15 -37 0 -37 11 -5 67 37 62 62 59 67 -9z
m88 -18 c0 -40 -4 -70 -10 -70 -5 0 -10 25 -10 55 0 56 -6 65 -28 43 -9 -9
-12 -9 -12 1 0 16 29 40 48 41 8 0 12 -20 12 -70z m2540 0 c0 -63 -2 -70 -20
-70 -18 0 -20 7 -20 70 0 63 2 70 20 70 18 0 20 -7 20 -70z m269 49 c24 -14
31 -23 23 -31 -8 -8 -21 -6 -45 6 -19 9 -43 16 -52 16 -9 0 -33 -7 -52 -16
-24 -12 -37 -14 -45 -6 -17 17 49 52 97 52 23 0 55 -9 74 -21z m-3019 -14 c0
-8 -4 -15 -9 -15 -13 0 -22 16 -14 24 11 11 23 6 23 -9z m2688 -48 c3 -52 1
-57 -18 -57 -18 0 -20 6 -20 53 0 30 3 57 7 61 17 16 28 -5 31 -57z m720 54
c9 -5 12 -24 10 -52 l-3 -44 -122 -3 -123 -3 0 49 c0 27 3 52 7 55 9 10 216 8
231 -2z m-413 -34 c28 -21 11 -38 -25 -24 -23 9 -35 9 -49 0 -15 -10 -22 -9
-31 2 -24 29 67 49 105 22z m-367 -40 c3 -32 0 -37 -17 -37 -17 0 -21 6 -21
33 0 61 33 63 38 4z m-2628 -2 c0 -8 -4 -15 -9 -15 -13 0 -22 16 -14 24 11 11
23 6 23 -9z m2568 -13 c3 -17 -2 -22 -17 -22 -14 0 -21 6 -21 18 0 38 33 41
38 4z m412 8 c0 -4 -7 -13 -16 -20 -12 -11 -18 -10 -32 4 -14 14 -15 18 -3 25
15 9 51 3 51 -9z m443 -343 c121 -51 178 -195 126 -317 -45 -105 -181 -165
-290 -129 -50 17 -115 69 -139 111 -63 111 -14 269 102 327 51 25 151 29 201
8z m-3660 -157 c-5 -35 -2 -44 31 -81 24 -26 36 -48 34 -62 -3 -21 -9 -22
-115 -25 -104 -2 -113 -1 -123 18 -9 17 -4 27 31 65 38 41 41 49 36 85 l-5 40
58 0 58 0 -5 -40z m1565 -8 c17 -23 -2 -29 -35 -11 -31 17 -57 2 -61 -35 -4
-35 15 -58 46 -54 28 3 43 28 18 28 -9 0 -16 7 -16 15 0 10 10 15 30 15 29 0
30 -2 30 -45 0 -43 -11 -58 -26 -34 -4 8 -9 8 -17 0 -6 -6 -21 -11 -34 -11
-63 0 -88 99 -36 140 32 25 79 21 101 -8z m432 -37 c33 -97 33 -95 15 -95 -9
0 -19 9 -22 20 -4 14 -14 20 -35 20 -21 0 -31 -6 -35 -20 -3 -11 -12 -20 -19
-20 -18 0 -18 0 7 82 19 64 22 69 46 66 22 -2 29 -12 43 -53z m70 -20 c0 -60
-3 -75 -15 -75 -12 0 -15 15 -15 75 0 60 3 75 15 75 12 0 15 -15 15 -75z
m-370 16 c17 -33 11 -41 -30 -41 -23 0 -40 -5 -40 -11 0 -7 12 -9 36 -4 38 7
44 -8 12 -28 -45 -29 -93 26 -69 79 14 31 75 35 91 5z m122 6 c4 -7 8 -31 8
-54 0 -32 -4 -43 -15 -43 -11 0 -15 11 -15 39 0 22 -5 43 -10 46 -19 12 -40
-16 -40 -52 0 -56 -25 -35 -28 24 l-3 50 48 1 c27 1 50 -4 55 -11z m2288
-1952 l0 -1575 -2345 0 -2345 0 0 1575 0 1575 2345 0 2345 0 0 -1575z m-3070
-2056 c0 -14 -7 -19 -25 -19 -18 0 -25 5 -25 19 0 11 6 21 13 24 20 7 37 -4
37 -24z m-1123 -1 c13 -12 23 -27 23 -35 0 -18 -35 -17 -50 2 -15 18 -70 20
-94 2 -9 -7 -20 -31 -23 -54 -5 -35 -2 -45 20 -67 30 -30 53 -33 85 -10 30 21
28 44 -3 44 -18 0 -25 5 -25 20 0 17 7 20 50 20 l50 0 0 -65 c0 -58 -2 -65
-20 -65 -12 0 -20 7 -20 17 0 14 -2 14 -21 -3 -13 -12 -35 -19 -61 -19 -33 0
-45 6 -69 33 -24 27 -29 41 -29 86 0 46 4 59 29 85 25 27 36 31 82 31 40 0 58
-5 76 -22z m1942 -80 c19 -57 36 -109 38 -115 3 -8 -4 -13 -20 -13 -20 0 -27
6 -32 30 -6 28 -9 30 -55 30 -45 0 -48 -2 -53 -30 -5 -23 -12 -30 -31 -30
l-24 0 34 108 c18 59 34 110 34 115 0 4 17 7 38 7 l38 0 33 -102z m101 -13 c0
-108 -1 -115 -20 -115 -19 0 -20 7 -20 115 0 108 1 115 20 115 19 0 20 -7 20
-115z m-1038 73 c2 -15 11 -24 26 -26 12 -2 22 -10 22 -17 0 -7 -10 -15 -22
-17 -19 -2 -24 -10 -26 -45 -3 -38 -1 -43 22 -49 38 -9 33 -34 -7 -34 -46 0
-57 15 -57 77 0 40 -4 53 -15 53 -8 0 -15 7 -15 15 0 8 7 15 15 15 9 0 15 9
15 25 0 33 37 35 42 3z m-794 -54 c12 -14 22 -34 22 -45 0 -17 -7 -19 -66 -19
-67 0 -79 -10 -41 -34 12 -8 22 -7 37 2 22 14 60 16 60 4 0 -12 -30 -37 -54
-46 -26 -9 -84 11 -96 34 -6 10 -10 34 -10 53 0 27 7 41 32 62 38 32 81 29
116 -11z m183 17 c19 -15 24 -30 27 -85 4 -66 4 -66 -22 -66 -25 0 -26 2 -26
60 0 47 -4 62 -16 67 -32 12 -49 -11 -52 -71 -3 -52 -5 -56 -27 -56 -24 0 -25
2 -25 80 0 73 2 80 20 80 11 0 20 -5 20 -11 0 -5 10 -3 22 5 29 21 51 20 79
-3z m178 4 c30 -15 41 -33 41 -66 0 -17 -8 -19 -60 -19 -46 0 -60 -3 -60 -15
0 -19 48 -31 63 -16 13 13 47 15 47 2 0 -5 -12 -19 -27 -31 -72 -57 -170 43
-117 118 28 41 69 50 113 27z m171 -10 c0 -17 -5 -25 -18 -25 -30 0 -42 -21
-42 -72 0 -41 -3 -48 -20 -48 -18 0 -20 7 -20 80 0 73 2 80 20 80 11 0 20 -5
20 -11 0 -5 10 -3 22 5 31 22 38 20 38 -9z m157 4 c19 -17 18 -149 -1 -149 -8
0 -17 4 -21 9 -3 6 -17 3 -33 -6 -39 -22 -82 -4 -82 35 0 39 17 52 68 52 36 0
43 3 40 18 -3 19 -58 31 -58 13 0 -6 -11 -11 -25 -11 -14 0 -25 4 -25 8 0 11
30 37 50 45 20 8 70 0 87 -14z m401 -15 c47 -53 9 -138 -61 -138 -84 0 -119
95 -55 149 38 32 81 29 116 -11z m187 11 c21 -20 25 -34 25 -85 0 -57 -1 -60
-25 -60 -24 0 -25 3 -25 60 0 47 -4 62 -16 67 -32 12 -49 -11 -52 -71 -3 -52
-5 -56 -27 -56 -24 0 -25 2 -25 81 l0 82 28 -6 c15 -2 36 -1 47 3 33 14 45 11
70 -15z m172 4 c26 -22 14 -31 -32 -25 -30 5 -45 4 -45 -4 0 -6 8 -13 18 -16
86 -28 101 -53 57 -92 -32 -27 -74 -25 -107 5 -25 22 -23 33 7 33 14 0 25 -4
25 -10 0 -5 11 -10 25 -10 40 0 29 24 -17 40 -34 12 -44 20 -46 42 -6 49 70
74 115 37z m-537 -69 c0 -79 0 -80 -25 -80 -25 0 -25 1 -25 80 0 79 0 80 25
80 25 0 25 -1 25 -80z m-1269 -417 l21 -48 20 48 c30 69 48 62 48 -18 0 -37
-4 -65 -10 -65 -5 0 -10 24 -10 53 l0 52 -20 -42 c-10 -24 -24 -43 -29 -43 -6
0 -19 17 -28 38 l-17 37 -4 -47 c-5 -71 -22 -58 -22 17 0 81 19 87 51 18z
m529 32 c15 -18 7 -19 -19 -3 -15 9 -25 9 -45 0 -51 -23 -23 -111 31 -97 16 4
22 2 18 -5 -12 -19 -63 -11 -79 12 -34 48 -7 108 48 108 19 0 39 -7 46 -15z
m372 -45 c10 -30 16 -59 14 -65 -3 -5 -8 0 -11 13 -10 30 -64 32 -72 2 -3 -11
-10 -20 -15 -20 -6 0 -8 6 -5 13 2 6 13 36 23 65 24 66 41 64 66 -8z m58 56
c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10 -2 10 -4z
m1090 -60 l0 -63 -36 1 c-43 1 -60 21 -50 60 6 25 11 28 41 24 31 -4 35 -1 35
19 0 13 2 23 5 23 3 0 5 -29 5 -64z m152 4 c10 -30 16 -59 14 -65 -3 -5 -8 0
-11 13 -10 30 -61 31 -70 2 -3 -11 -10 -20 -15 -20 -4 0 1 29 13 65 26 80 43
81 69 5z m238 50 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0
10 -4 10 -10z m510 6 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11
6 0 10 -2 10 -4z m530 0 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10
11 6 0 10 -2 10 -4z m-3122 -37 c15 -1 15 -2 0 -6 -12 -3 -18 -14 -18 -33 0
-17 7 -34 18 -40 15 -10 15 -10 -3 -8 -14 2 -21 12 -23 33 -2 17 -7 34 -12 39
-5 5 -3 17 3 28 10 15 13 16 15 3 2 -8 11 -16 20 -16z m1151 -7 c-14 -6 -10
-70 4 -76 6 -3 3 -5 -8 -3 -15 2 -21 11 -23 37 -2 19 -9 38 -15 42 -9 6 -9 8
1 8 6 0 12 8 12 17 0 15 2 14 19 -3 10 -10 14 -20 10 -22z m325 6 c8 -5 7 -8
-1 -8 -8 0 -13 -14 -13 -34 0 -19 6 -37 13 -40 6 -3 3 -5 -8 -3 -15 2 -21 12
-25 42 -6 42 9 94 18 65 3 -8 10 -18 16 -22z m754 1 c15 -1 15 -2 0 -6 -12 -3
-18 -14 -18 -33 0 -17 7 -34 18 -40 15 -10 15 -10 -3 -8 -14 2 -21 12 -23 33
-2 17 -7 34 -12 39 -5 5 -3 17 3 28 10 15 13 16 15 3 2 -8 11 -16 20 -16z
m265 -7 c-19 -5 -16 -59 5 -72 15 -10 15 -10 -3 -8 -15 2 -21 12 -23 38 -2 19
-9 38 -15 42 -9 6 -9 8 1 8 6 0 12 7 12 15 0 12 3 12 18 -2 13 -13 14 -19 5
-21z m511 6 c8 -5 7 -8 -1 -8 -8 0 -13 -14 -13 -34 0 -19 6 -37 13 -40 6 -3 3
-5 -8 -3 -15 2 -21 12 -25 42 -6 42 9 94 18 65 3 -8 10 -18 16 -22z m59 -11
c-19 -12 -16 -54 5 -67 15 -10 15 -10 -3 -8 -15 2 -21 12 -23 38 -2 19 -9 38
-15 42 -9 6 -9 8 1 8 6 0 12 7 12 15 0 12 3 12 18 -2 14 -14 15 -20 5 -26z
m-3233 -2 c18 -21 3 -35 -38 -35 -34 0 -35 -1 -19 -17 15 -15 20 -16 38 -5 18
11 20 11 17 0 -6 -18 -59 -16 -71 3 -5 9 -7 28 -3 42 5 21 12 27 35 27 16 0
34 -7 41 -15z m108 -12 c3 -20 -1 -23 -32 -23 -20 0 -36 -5 -36 -10 0 -18 29
-23 47 -9 14 12 16 12 11 -1 -3 -9 -17 -15 -34 -15 -35 0 -56 43 -34 70 20 25
74 16 78 -12z m350 0 c3 -20 -1 -23 -32 -23 -20 0 -36 -5 -36 -10 0 -17 29
-23 45 -10 9 7 18 11 20 8 12 -11 -26 -30 -49 -24 -30 7 -41 37 -26 66 16 30
74 25 78 -7z m106 5 c9 -34 7 -68 -3 -68 -6 0 -11 17 -13 38 -2 29 -7 37 -23
37 -16 0 -21 -8 -23 -37 -4 -52 -22 -48 -22 5 0 42 0 42 39 45 33 2 39 -1 45
-20z m206 -23 c0 -25 -4 -45 -10 -45 -5 0 -10 20 -10 45 0 25 5 45 10 45 6 0
10 -20 10 -45z m121 15 c14 -38 22 -38 37 2 6 17 14 29 17 26 8 -7 -46 -128
-57 -128 -5 0 -4 9 2 20 8 16 6 30 -9 65 -11 25 -15 45 -10 45 6 0 15 -13 20
-30z m147 18 c28 -28 7 -78 -33 -78 -27 0 -45 18 -45 45 0 27 18 45 45 45 12
0 26 -5 33 -12z m58 -58 c20 -17 42 3 47 43 3 25 4 21 5 -14 l2 -46 -37 1
c-38 1 -38 1 -39 46 -1 28 0 33 3 13 2 -17 11 -37 19 -43z m111 55 c-10 -7
-17 -26 -17 -44 0 -17 -4 -31 -10 -31 -5 0 -10 20 -10 44 0 41 2 44 27 44 24
0 25 -2 10 -13z m176 0 c-12 -9 -23 -29 -26 -48 -3 -26 -4 -23 -5 13 -2 43 0
46 25 48 28 2 28 2 6 -13z m47 -19 c0 -38 10 -49 34 -40 10 4 16 18 16 40 0
19 5 34 10 34 6 0 10 -20 10 -43 0 -43 0 -44 -37 -45 -20 -1 -41 4 -45 11 -11
18 -10 77 2 77 6 0 10 -15 10 -34z m150 25 c0 -4 -11 -6 -25 -3 -36 6 -31 -14
6 -27 21 -7 30 -16 27 -28 -4 -23 -51 -29 -68 -9 -8 10 -8 16 -2 16 6 0 14 -4
17 -10 9 -15 35 -12 35 4 0 8 -11 17 -25 20 -38 10 -34 46 5 46 17 0 30 -4 30
-9z m168 -18 c3 -20 -1 -23 -32 -23 -20 0 -36 -5 -36 -10 0 -17 27 -22 52 -10
22 12 22 11 6 -5 -36 -38 -92 10 -67 57 15 28 73 21 77 -9z m367 17 c4 -7 -2
-9 -19 -4 -34 8 -34 -9 0 -25 35 -16 29 -46 -10 -46 -16 0 -31 6 -34 13 -3 11
-1 11 17 1 16 -11 23 -11 33 -1 9 9 5 14 -20 23 -30 10 -40 27 -25 42 10 11
51 8 58 -3z m90 0 c4 -7 -2 -9 -19 -4 -34 8 -34 -9 0 -25 35 -16 29 -46 -10
-46 -17 0 -31 6 -34 15 -4 12 -2 13 9 3 17 -17 39 -16 39 1 0 8 -11 17 -25 20
-24 6 -33 25 -18 39 10 11 51 8 58 -3z m45 -35 c0 -25 -4 -45 -10 -45 -5 0
-10 20 -10 45 0 25 5 45 10 45 6 0 10 -20 10 -45z m85 35 c4 -7 -2 -9 -19 -4
-34 8 -34 -9 0 -25 35 -16 29 -46 -10 -46 -16 0 -31 6 -34 13 -3 11 -1 11 17
1 16 -11 23 -11 33 -1 9 9 5 14 -20 23 -30 10 -40 27 -25 42 10 11 51 8 58 -3z
m163 -36 l3 -41 -38 1 c-31 1 -38 5 -38 21 0 14 8 21 29 25 34 6 33 25 -1 25
-13 -1 -23 3 -23 8 0 4 15 7 33 5 30 -3 32 -6 35 -44z m104 33 c11 -17 10 -77
-1 -77 -6 0 -11 17 -13 38 -2 29 -7 37 -23 37 -16 0 -21 -8 -23 -37 -4 -52
-22 -48 -22 5 0 43 0 44 37 45 20 1 41 -4 45 -11z m145 -54 c-2 -16 -4 -5 -4
22 0 28 2 40 4 28 2 -13 2 -35 0 -50z m109 17 l2 -45 -7 40 c-5 31 -11 41 -28
43 -18 3 -23 -4 -31 -40 l-10 -43 -1 46 -1 46 38 -1 c37 -1 37 -1 38 -46z
m145 23 c-6 -21 -15 -29 -37 -32 l-29 -3 35 -13 c19 -6 35 -18 35 -25 0 -21
-30 -34 -59 -26 -25 6 -27 10 -21 34 4 15 7 38 6 51 -2 34 6 41 44 41 31 0 33
-2 26 -27z m109 12 c18 -21 3 -35 -38 -35 -34 0 -35 -1 -19 -17 15 -15 20 -16
38 -5 18 11 20 11 17 0 -6 -18 -59 -16 -71 3 -5 9 -7 28 -3 42 5 21 12 27 35
27 16 0 34 -7 41 -15z m167 -52 c-2 -16 -4 -5 -4 22 0 28 2 40 4 28 2 -13 2
-35 0 -50z m109 17 l2 -45 -7 40 c-5 31 -11 41 -28 43 -18 3 -23 -4 -31 -40
l-10 -43 -1 46 -1 46 38 -1 c37 -1 37 -1 38 -46z m107 33 c-10 -30 -24 -43
-47 -44 -15 -1 -13 -4 12 -11 57 -19 36 -69 -24 -54 -23 6 -25 10 -19 34 4 15
7 38 6 51 -2 34 6 41 44 41 28 0 33 -3 28 -17z m-3143 -40 c0 -28 -3 -34 -10
-23 -5 8 -7 23 -4 32 3 11 -2 18 -18 21 -20 4 -20 4 5 6 25 1 27 -2 27 -36z
m453 -33 c-3 -11 -9 -20 -13 -20 -5 0 -6 9 -3 20 3 11 9 20 13 20 5 0 6 -9 3
-20z m-1023 -172 l0 -41 27 24 26 24 -16 -25 c-16 -23 -16 -25 5 -47 27 -29
12 -30 -19 -1 l-23 21 0 -21 c0 -12 -4 -22 -10 -22 -6 0 -10 28 -10 65 0 37 4
65 10 65 6 0 10 -19 10 -42z m1070 18 c0 -19 4 -22 25 -18 31 5 55 -13 55 -43
0 -31 -20 -45 -63 -43 l-37 1 0 64 c0 35 4 63 10 63 6 0 10 -11 10 -24z m1090
14 c0 -5 -4 -10 -10 -10 -5 0 -10 5 -10 10 0 6 5 10 10 10 6 0 10 -4 10 -10z
m-744 -25 c9 -8 11 -15 5 -15 -15 0 -14 -67 2 -74 6 -3 3 -5 -8 -3 -15 2 -21
11 -23 40 -2 20 -8 37 -13 37 -5 0 -4 7 3 15 16 18 16 18 34 0z m690 0 c9 -8
11 -15 5 -15 -15 0 -14 -67 2 -74 6 -3 3 -5 -8 -3 -15 2 -21 11 -23 40 -2 20
-8 37 -13 37 -5 0 -4 7 3 15 16 18 16 18 34 0z m-1950 -55 l2 -45 -7 40 c-5
31 -10 40 -26 40 -16 0 -21 -8 -23 -37 -4 -52 -22 -48 -22 5 l0 43 38 -1 37 0
1 -45z m107 29 c5 -9 7 -28 3 -43 -6 -23 -11 -27 -38 -24 -41 4 -56 28 -40 63
9 20 18 26 39 23 14 -2 30 -10 36 -19z m44 -16 l10 -38 9 34 c13 45 32 51 40
12 8 -39 20 -40 28 -1 3 17 10 30 15 30 13 0 -13 -83 -28 -88 -6 -2 -14 10
-17 27 -9 44 -21 47 -28 6 -9 -49 -31 -44 -43 10 -12 54 1 61 14 8z m301 25
c14 -12 16 -78 2 -78 -5 0 -10 15 -10 34 0 19 -5 38 -10 41 -18 11 -40 -16
-41 -49 -1 -30 -2 -30 -9 7 -8 44 -14 51 -35 44 -9 -4 -15 -19 -15 -42 0 -19
-4 -35 -10 -35 -5 0 -10 20 -10 44 l0 43 63 0 c34 0 68 -4 75 -9z m113 -9 c8
-16 8 -28 0 -46 -9 -20 -17 -24 -44 -21 -27 2 -33 8 -35 31 -2 16 2 35 9 43
17 21 57 17 70 -7z m62 3 c-12 -9 -24 -30 -26 -47 -3 -22 -4 -18 -6 15 -1 43
1 46 27 48 l27 2 -22 -18z m91 12 c9 -3 16 -15 16 -25 0 -15 -7 -19 -36 -19
-24 0 -34 -4 -31 -12 2 -7 18 -12 36 -12 17 1 28 -2 25 -7 -3 -5 -19 -9 -35
-9 -22 0 -32 6 -39 26 -18 47 15 77 64 58z m154 -40 l3 -41 -38 1 c-31 1 -38
5 -38 21 0 14 8 21 28 23 15 2 27 9 27 18 0 16 -26 19 -35 4 -3 -5 -11 -10
-17 -10 -6 0 -6 6 2 16 8 8 25 14 39 12 23 -3 26 -8 29 -44z m223 25 c8 -16 8
-28 0 -46 -9 -20 -17 -24 -44 -21 -27 2 -33 8 -35 31 -2 16 2 35 9 43 17 21
57 17 70 -7z m64 -54 c16 0 21 8 23 38 4 51 22 47 22 -6 l0 -43 -37 1 -38 0
-1 45 -2 45 7 -40 c5 -31 10 -40 26 -40z m257 68 c-6 -2 -9 -9 -6 -14 9 -15
-16 -39 -39 -39 -25 0 -11 -16 18 -22 12 -2 20 -11 20 -23 0 -16 -7 -20 -35
-20 l-35 0 0 50 c-1 63 8 75 54 74 20 0 30 -3 23 -6z m96 -5 c23 -23 13 -38
-24 -38 -24 0 -34 -4 -31 -12 2 -7 16 -13 30 -13 15 1 27 -3 27 -8 0 -15 -63
-3 -73 15 -16 25 7 68 36 68 13 0 28 -5 35 -12z m109 -38 c1 -42 0 -40 -13 18
-5 23 -28 30 -40 10 -4 -6 -11 -25 -15 -42 -6 -28 -7 -27 -8 14 l-1 46 38 -1
c37 0 37 0 39 -45z m101 38 c23 -23 13 -38 -24 -38 -24 0 -34 -4 -31 -12 2 -7
16 -12 31 -11 14 1 24 -2 21 -8 -9 -13 -49 -11 -63 3 -28 28 -7 78 33 78 12 0
26 -5 33 -12z m65 -6 c-12 -10 -24 -30 -26 -47 -3 -22 -4 -18 -5 15 -2 42 0
45 25 47 l27 1 -21 -16z m105 -28 l3 -41 -38 1 c-31 1 -38 5 -38 21 0 14 8 21
28 23 15 2 27 9 27 18 0 16 -26 19 -35 4 -3 -5 -11 -10 -17 -10 -6 0 -6 6 2
16 8 8 25 14 39 12 23 -3 26 -8 29 -44z m112 1 c0 -25 -4 -45 -10 -45 -5 0
-10 20 -10 45 0 25 5 45 10 45 6 0 10 -20 10 -45z m98 33 c16 -16 15 -53 -2
-67 -8 -7 -27 -11 -43 -9 -51 6 -41 88 11 88 12 0 27 -5 34 -12z m108 -38 c1
-28 0 -33 -3 -13 -2 17 -11 37 -19 43 -20 17 -42 -3 -47 -43 -3 -25 -4 -21 -5
14 l-2 46 38 -1 c37 -1 37 -1 38 -46z m89 40 c4 -7 -2 -9 -19 -4 -34 8 -35
-13 -1 -26 37 -14 34 -50 -4 -50 -17 0 -33 5 -36 10 -4 7 2 9 18 5 37 -10 44
14 8 26 -29 10 -39 28 -24 42 10 11 51 8 58 -3z m-23 -1346 c145 -64 270 -123
279 -132 9 -10 57 -107 107 -217 186 -410 176 -392 218 -399 32 -7 58 3 213
75 97 45 235 113 307 150 114 58 167 78 390 143 143 41 296 86 342 99 l82 25
0 -102 0 -103 -227 -126 c-126 -69 -309 -167 -408 -217 l-180 -91 -121 -11
-122 -12 -4 -67 c-3 -57 -8 -74 -34 -106 -63 -79 32 -73 -1190 -73 -1225 0
-1146 -5 -1228 75 -49 47 -91 121 -101 178 -4 21 -12 40 -17 43 -24 15 -673
78 -919 90 l-136 7 -6 171 c-4 94 -3 174 1 178 10 10 220 -14 513 -57 129 -19
325 -47 437 -61 l203 -27 22 20 c37 34 87 55 147 60 l57 5 6 285 c4 193 10
290 18 299 10 12 101 14 550 14 l538 0 263 -116z"/>
<path d="M804 8235 c-4 -9 -2 -21 4 -27 15 -15 44 -1 40 19 -4 23 -36 29 -44
8z"/>
<path d="M998 8210 c-16 -29 -16 -30 2 -30 16 0 20 7 20 30 0 17 -1 30 -2 30
-2 0 -11 -14 -20 -30z"/>
<path d="M4165 7630 c-4 -6 5 -10 19 -10 14 0 26 5 26 10 0 6 -9 10 -19 10
-11 0 -23 -4 -26 -10z"/>
<path d="M4310 7630 c0 -5 11 -10 24 -10 14 0 28 5 31 10 4 6 -7 10 -24 10
-17 0 -31 -4 -31 -10z"/>
<path d="M4170 7576 c0 -43 17 -56 30 -22 11 30 4 56 -16 56 -9 0 -14 -12 -14
-34z"/>
<path d="M4320 7576 c0 -40 12 -53 30 -31 16 19 9 59 -12 63 -14 3 -18 -4 -18
-32z"/>
<path d="M4268 7513 c-37 -6 -36 -20 2 -25 24 -4 30 -1 30 14 0 10 -1 17 -2
17 -2 -1 -15 -4 -30 -6z"/>
<path d="M620 7647 c0 -18 -7 -43 -16 -55 -14 -21 -14 -22 8 -21 41 2 74 14
60 23 -6 4 -12 25 -12 47 0 32 -3 39 -20 39 -16 0 -20 -7 -20 -33z"/>
<path d="M605 7543 c-102 -9 -76 -33 37 -33 75 0 106 12 77 31 -14 9 -37 9
-114 2z"/>
<path d="M2636 7625 c-10 -26 -7 -35 9 -35 17 0 19 18 6 38 -7 11 -10 10 -15
-3z"/>
<path d="M2325 7600 c-4 -6 5 -10 20 -10 15 0 24 4 20 10 -3 6 -12 10 -20 10
-8 0 -17 -4 -20 -10z"/>
<path d="M2271 6411 c-6 -10 -7 -21 -4 -25 11 -11 185 -7 178 4 -3 6 -23 10
-44 10 -22 0 -44 6 -51 15 -18 21 -67 19 -79 -4z m59 -11 c0 -5 -6 -10 -14
-10 -8 0 -18 5 -21 10 -3 6 3 10 14 10 12 0 21 -4 21 -10z"/>
<path d="M2190 6240 l0 -70 140 0 140 0 0 70 0 70 -140 0 -140 0 0 -70z m95
25 c0 -10 -6 -20 -12 -22 -8 -3 -13 5 -13 22 0 17 5 25 13 23 6 -3 12 -13 12
-23z m91 -11 c-5 -13 -10 -14 -18 -6 -6 6 -8 18 -4 28 5 13 10 14 18 6 6 -6 8
-18 4 -28z m-41 -44 c-3 -5 -15 -10 -25 -10 -10 0 -22 5 -25 10 -4 6 7 10 25
10 18 0 29 -4 25 -10z"/>
<path d="M2204 6055 c-7 -26 2 -62 13 -52 10 10 12 67 2 73 -5 2 -11 -7 -15
-21z"/>
<path d="M2423 6040 c0 -45 9 -51 24 -17 7 15 7 29 1 40 -15 28 -25 19 -25
-23z"/>
<path d="M2215 5921 c-3 -11 -14 -22 -23 -24 -10 -3 -7 -5 9 -6 25 -1 39 14
39 40 0 17 -19 9 -25 -10z"/>
<path d="M2410 5931 c0 -23 14 -41 32 -41 18 0 18 1 4 16 -9 8 -16 20 -16 25
0 5 -4 9 -10 9 -5 0 -10 -4 -10 -9z"/>
<path d="M2120 5581 c0 -63 5 -69 83 -87 15 -3 27 -12 27 -19 0 -15 -51 -35
-86 -35 -22 0 -24 -4 -24 -56 0 -48 2 -55 16 -50 22 8 44 -11 44 -39 0 -12
-13 -41 -30 -63 -24 -33 -30 -52 -30 -92 l0 -50 54 0 53 0 -8 48 c-12 58 -3
124 23 177 27 53 46 73 90 96 50 25 88 26 181 5 43 -10 80 -17 82 -15 2 2 5
57 7 122 l3 117 -242 0 -243 0 0 -59z m240 -86 c0 -8 -9 -15 -20 -15 -11 0
-20 7 -20 15 0 8 9 15 20 15 11 0 20 -7 20 -15z m-60 -74 c0 -8 -64 -51 -76
-51 -2 0 -4 7 -4 15 0 8 12 21 28 29 31 17 52 20 52 7z"/>
<path d="M2745 5266 c30 -71 9 -224 -34 -250 -22 -14 -10 -26 24 -26 31 0 37
5 56 42 24 47 35 134 25 201 -6 36 -12 47 -29 52 -61 18 -58 20 -42 -19z"/>
<path d="M2577 5212 c-24 -26 -21 -68 5 -86 29 -20 34 -20 58 4 26 26 26 76 1
90 -28 15 -46 12 -64 -8z"/>
<path d="M3080 5195 c16 -43 12 -117 -10 -160 -11 -22 -20 -41 -20 -42 0 -2
15 -3 33 -3 27 0 36 6 47 28 15 32 25 162 13 178 -4 6 -23 15 -41 19 -31 6
-32 6 -22 -20z"/>
<path d="M2978 5169 c-45 -26 -5 -104 41 -80 32 18 39 51 15 75 -18 18 -32 20
-56 5z"/>
<path d="M3329 5142 c17 -32 13 -87 -9 -115 -27 -34 -26 -37 15 -37 28 0 37 5
50 30 16 31 20 97 7 117 -4 7 -23 16 -41 19 -31 7 -33 6 -22 -14z"/>
<path d="M3247 5104 c-13 -14 -7 -43 12 -53 24 -13 55 8 50 35 -4 19 -48 32
-62 18z"/>
<path d="M1889 5010 c21 -18 39 -20 207 -20 101 0 184 4 184 8 0 28 -30 32
-219 32 l-196 -1 24 -19z"/>
<path d="M2472 3570 c-26 -68 -26 -70 8 -70 28 0 30 2 24 28 -4 15 -10 36 -14
47 -8 19 -8 19 -18 -5z"/>
<path d="M727 3524 c-15 -16 -5 -24 29 -24 24 0 34 4 32 13 -5 13 -50 22 -61
11z"/>
<path d="M1107 3524 c-15 -16 -5 -24 29 -24 24 0 34 4 32 13 -5 13 -50 22 -61
11z"/>
<path d="M1421 3457 c-6 -8 -8 -17 -4 -20 13 -14 43 -6 53 13 9 17 8 20 -13
20 -14 0 -30 -6 -36 -13z"/>
<path d="M1823 3522 c-12 -8 -18 -31 -15 -64 2 -22 39 -33 57 -18 18 15 20 61
3 78 -14 14 -28 15 -45 4z"/>
<path d="M1316 3075 c-11 -30 -6 -45 15 -45 16 0 19 4 14 23 -10 32 -21 41
-29 22z"/>
<path d="M2441 3042 c-11 -21 3 -52 23 -52 21 0 38 27 31 50 -8 25 -41 26 -54
2z"/>
<path d="M2616 3068 c-9 -35 -8 -38 15 -38 16 0 19 4 14 23 -11 35 -22 41 -29
15z"/>
<path d="M590 3046 c0 -11 9 -16 26 -16 31 0 28 23 -4 28 -15 2 -22 -2 -22
-12z"/>
<path d="M697 3053 c-14 -13 -6 -23 18 -23 16 0 25 6 25 15 0 15 -31 21 -43 8z"/>
<path d="M1047 3054 c-4 -4 -7 -11 -7 -16 0 -13 50 -6 53 7 2 12 -36 19 -46 9z"/>
<path d="M1637 3053 c-13 -13 -7 -54 9 -60 24 -9 46 24 33 48 -10 19 -30 25
-42 12z"/>
<path d="M2337 3054 c-4 -4 -7 -11 -7 -16 0 -13 50 -6 53 7 2 12 -36 19 -46 9z"/>
<path d="M3090 3005 c0 -8 6 -15 14 -15 7 0 19 7 26 15 11 13 8 15 -14 15 -16
0 -26 -5 -26 -15z"/>
<path d="M3595 3050 c-4 -7 -3 -16 3 -22 14 -14 45 -2 40 15 -6 16 -34 21 -43
7z"/>
<path d="M3590 2964 c0 -10 7 -14 22 -12 32 5 35 28 4 28 -17 0 -26 -5 -26
-16z"/>
<path d="M3697 3054 c-11 -12 3 -24 29 -24 16 0 24 5 22 13 -5 13 -40 22 -51
11z"/>
<path d="M4085 3050 c-8 -13 3 -30 20 -30 14 0 27 24 18 34 -10 9 -31 7 -38
-4z"/>
<path d="M4080 2964 c0 -10 7 -14 22 -12 32 5 35 28 4 28 -17 0 -26 -5 -26
-16z"/>
<path d="M1511 2786 c-19 -23 -4 -58 22 -54 17 2 22 10 22 33 0 34 -24 45 -44
21z"/>
<path d="M634 2786 c-10 -26 1 -51 23 -54 14 -2 23 3 28 18 12 37 -38 71 -51
36z"/>
<path d="M1091 2786 c-19 -23 -4 -58 22 -54 17 2 22 10 22 33 0 34 -24 45 -44
21z"/>
<path d="M1257 2794 c-15 -15 -6 -24 24 -24 20 0 29 4 27 13 -5 14 -40 21 -51
11z"/>
<path d="M1400 2745 c0 -8 9 -15 19 -15 10 0 21 7 25 15 4 11 -1 15 -19 15
-16 0 -25 -6 -25 -15z"/>
<path d="M1621 2786 c-19 -23 -4 -58 22 -54 17 2 22 10 22 33 0 34 -24 45 -44
21z"/>
<path d="M1940 2781 c0 -15 6 -21 21 -21 25 0 22 33 -4 38 -12 2 -17 -3 -17
-17z"/>
<path d="M1937 2714 c-10 -11 3 -24 24 -24 10 0 19 7 19 15 0 15 -31 21 -43 9z"/>
<path d="M2047 2794 c-14 -14 -6 -24 19 -24 16 0 24 5 22 13 -5 14 -31 21 -41
11z"/>
<path d="M2257 2794 c-14 -14 -6 -24 19 -24 16 0 24 5 22 13 -5 14 -31 21 -41
11z"/>
<path d="M2420 2745 c0 -8 9 -15 20 -15 11 0 20 7 20 15 0 8 -9 15 -20 15 -11
0 -20 -7 -20 -15z"/>
<path d="M2630 2785 c-17 -21 -2 -50 26 -50 14 0 19 7 19 30 0 34 -24 45 -45
20z"/>
<path d="M1890 1044 l0 -206 89 4 c86 4 90 5 116 36 38 46 105 82 161 88 33 3
85 -3 158 -20 61 -14 112 -23 115 -20 4 3 8 77 10 165 l3 159 -326 0 -326 0 0
-206z"/>
<path d="M2715 772 c53 -126 44 -256 -25 -350 l-30 -42 49 0 c40 0 51 4 63 23
48 75 69 201 49 299 -14 65 -13 64 -70 77 -38 8 -42 7 -36 -7z"/>
<path d="M2504 676 c-52 -44 -27 -136 37 -136 24 0 67 40 70 65 5 38 -11 76
-37 85 -35 14 -39 13 -70 -14z"/>
<path d="M3176 644 c23 -55 15 -148 -18 -213 l-27 -51 43 0 c52 0 59 7 81 84
18 61 17 178 -1 196 -5 5 -28 12 -52 16 l-42 7 16 -39z"/>
<path d="M3030 610 c-39 -39 -13 -110 40 -110 23 0 60 42 60 68 0 27 -33 62
-60 62 -11 0 -29 -9 -40 -20z"/>
<path d="M3504 581 c30 -57 19 -128 -27 -178 l-20 -23 54 0 c53 0 56 1 72 35
17 36 23 140 9 162 -4 6 -21 14 -37 18 -17 4 -38 9 -48 12 -17 5 -18 3 -3 -26z"/>
<path d="M3396 524 c-20 -19 -20 -24 0 -52 27 -39 84 -23 84 23 0 43 -53 61
-84 29z"/>
<path d="M1898 513 c12 -2 30 -2 40 0 9 3 -1 5 -23 4 -22 0 -30 -2 -17 -4z"/>
<path d="M1550 422 c0 -4 13 -15 29 -25 32 -19 109 -22 385 -19 l149 2 -23 25
-23 25 -259 0 c-142 0 -258 -4 -258 -8z"/>
</g>
</svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))'
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))'
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))'
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))'
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))'
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))'
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))'
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))'
        }
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)'
      },
      animation: {
        'gradient-x': 'gradient-x 15s ease infinite',
        'gradient-y': 'gradient-y 15s ease infinite',
        'gradient-xy': 'gradient-xy 15s ease infinite',
        'wave': 'wave 8s ease-in-out infinite',
      },
      keyframes: {
        'gradient-y': {
          '0%, 100%': {
            'background-size': '400% 400%',
            'background-position': 'center top'
          },
          '50%': {
            'background-size': '200% 200%',
            'background-position': 'center center'
          }
        },
        'gradient-x': {
          '0%, 100%': {
            'background-size': '200% 200%',
            'background-position': 'left center'
          },
          '50%': {
            'background-size': '200% 200%',
            'background-position': 'right center'
          }
        },
        'gradient-xy': {
          '0%, 100%': {
            'background-size': '400% 400%',
            'background-position': 'left top'
          },
          '50%': {
            'background-size': '200% 200%',
            'background-position': 'right bottom'
          }
        },
        'wave': {
          '0%, 100%': {
            'transform': 'translateY(0%)'
          },
          '50%': {
            'transform': 'translateY(-5%)'
          }
        }
      },
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
        'gradient-sharp': 'linear-gradient(to right bottom, transparent 50%, white 50%)',
      }
    }
  },
  plugins: [require("tailwindcss-animate")],
};

export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: types/index.ts
================
export interface Feature {
    name: string;
    src: string;
  }
  
  export interface GenerationData {
    name: string;
    value: number;
  }
  
  export interface DifficultyData {
    name: string;
    difficulty: number;
  }
  
  export interface CommunicationData {
    name: string;
    score: number;
  }
  
  export interface ImpactData {
    name: string;
    percentage: number;
  }
  
  export interface KeyMetric {
    metric: string;
    value: string;
    description: string;
  }
  
  export interface Interview {
    name: string;
    generation: string;
    avatar: string;
    quote: string;
  }
  
  export interface CustomTooltipProps {
    active?: boolean;
    payload?: any[];
    label?: string;
  }
  
  export interface ParallaxSectionProps {
    children: React.ReactNode;
    offset?: number;
  }
  
  export interface AnimatedNumberProps {
    n: number;
  }
